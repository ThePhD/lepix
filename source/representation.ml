let token_to_string = function
	| Parser.LPAREN -> "LPAREN"	
	| Parser.RPAREN -> "RPAREN"	
	| Parser.LBRACE -> "LBRACE"	
	| Parser.RBRACE -> "RBRACE"	
	| Parser.LSQUARE -> "LSQUARE"
	| Parser.RSQUARE -> "RSQUARE"
	| Parser.SEMI -> "SEMI"	
	| Parser.COMMA -> "COMMA"	
	| Parser.PLUS -> "PLUS"	
	| Parser.MINUS -> "MINUS"	
	| Parser.TIMES -> "TIMES"	
	| Parser.DIVIDE -> "DIVIDE"	
	| Parser.ASSIGN -> "ASSIGN"	
	| Parser.EQ -> "EQ"
	| Parser.NEQ -> "NEQ"
	| Parser.LT -> "LT"
	| Parser.LEQ -> "LEQ"
	| Parser.GT -> "GT"
	| Parser.GEQ -> "GEQ"
	| Parser.AND -> "AND"
	| Parser.OR -> "OR"
	| Parser.NOT -> "NOT"
	| Parser.DOT -> "DOT"
	| Parser.COLON -> "COLON"
	| Parser.PARALLEL -> "PARALLEL"
	| Parser.INVOCATIONS -> "INVOCATIONS"
	| Parser.THREADCOUNT -> "THREADCOUNT"
	| Parser.ATOMIC -> "ATOMIC"
	| Parser.VAR -> "VAR"
	| Parser.LET -> "LET"
	| Parser.FUN -> "FUN"
	| Parser.NAMESPACE -> "NAMESPACE"
	| Parser.IF -> "IF"
	| Parser.ELSE -> "ELSE"	
	| Parser.FOR -> "FOR"
	| Parser.TO -> "TO"
	| Parser.BY -> "BY"
	| Parser.WHILE -> "WHILE"	
	| Parser.RETURN -> "RETURN"	
	| Parser.INT -> "INT"
	| Parser.FLOAT -> "FLOAT"	
	| Parser.BOOL -> "BOOL"	
	| Parser.VOID -> "VOID"
	| Parser.TRUE -> "TRUE"	
	| Parser.FALSE -> "FALSE"	
	| Parser.BREAK -> "BREAK"	
	| Parser.CONTINUE -> "CONTINUE"	
	| Parser.INTLITERAL(i) -> "INTLITERAL(" ^ string_of_int i ^ ")"
	| Parser.FLOATLITERAL(f) -> "FLOATLITERAL(" ^ string_of_float f ^ ")"
	| Parser.ID(s) -> "ID(" ^ s ^ ")"
	| Parser.MODULO -> "MODULO"
	| Parser.EOF -> "EOF"

let token_list_to_string token_list = 
	let rec helper = function
	| (token) :: tail -> token_to_string token ^ " " ^ helper tail
	| [] -> "\n" in helper token_list
