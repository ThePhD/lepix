type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LSQUARE
  | RSQUARE
  | COLON
  | FUN
  | CONTINUE
  | BREAK
  | PARALLEL
  | TO
  | BY
  | INVOCATIONS
  | ATOMIC
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | VAR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | FLOAT
  | INTLITERAL of (int)
  | FLOATLITERAL of (float)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 55 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LSQUARE *);
  264 (* RSQUARE *);
  265 (* COLON *);
  266 (* FUN *);
  267 (* CONTINUE *);
  268 (* BREAK *);
  269 (* PARALLEL *);
  270 (* TO *);
  271 (* BY *);
  272 (* INVOCATIONS *);
  273 (* ATOMIC *);
  274 (* PLUS *);
  275 (* MINUS *);
  276 (* TIMES *);
  277 (* DIVIDE *);
  278 (* ASSIGN *);
  279 (* NOT *);
  280 (* EQ *);
  281 (* NEQ *);
  282 (* LT *);
  283 (* LEQ *);
  284 (* GT *);
  285 (* GEQ *);
  286 (* TRUE *);
  287 (* FALSE *);
  288 (* AND *);
  289 (* OR *);
  290 (* VAR *);
  291 (* RETURN *);
  292 (* IF *);
  293 (* ELSE *);
  294 (* FOR *);
  295 (* WHILE *);
  296 (* INT *);
  297 (* BOOL *);
  298 (* VOID *);
  299 (* FLOAT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  300 (* INTLITERAL *);
  301 (* FLOATLITERAL *);
  302 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\005\000\006\000\007\000\007\000\007\000\008\000\009\000\
\009\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\011\000\011\000\012\000\
\012\000\001\000\000\000"

let yylen = "\002\000\
\000\000\001\000\003\000\001\000\001\000\001\000\001\000\003\000\
\005\000\007\000\001\000\001\000\001\000\001\000\001\000\003\000\
\004\000\004\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\005\000\000\000\003\000\005\000\010\000\000\000\
\002\000\002\000\007\000\011\000\007\000\011\000\011\000\003\000\
\002\000\002\000\001\000\009\000\004\000\000\000\002\000\000\000\
\002\000\003\000\002\000"

let yydefred = "\000\000\
\054\000\000\000\059\000\000\000\000\000\055\000\000\000\000\000\
\000\000\000\000\058\000\057\000\000\000\000\000\000\000\004\000\
\006\000\007\000\005\000\000\000\000\000\000\000\000\000\014\000\
\015\000\012\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\020\000\000\000\000\000\000\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\021\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\018\000\017\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\038\000\040\000\
\010\000\000\000\039\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\041\000\050\000\049\000\
\000\000\040\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\048\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\045\000\000\000\000\000\000\000\000\000\052\000\040\000\
\040\000\040\000\000\000\000\000\000\000\044\000\047\000\046\000"

let yydgoto = "\002\000\
\003\000\032\000\100\000\020\000\009\000\101\000\053\000\012\000\
\090\000\102\000\004\000\007\000"

let yysindex = "\013\000\
\000\000\000\000\000\000\242\254\249\254\000\000\001\000\038\255\
\027\255\020\255\000\000\000\000\017\255\101\000\053\255\000\000\
\000\000\000\000\000\000\063\255\101\000\101\000\101\000\000\000\
\000\000\000\000\000\000\003\255\124\001\039\255\046\255\254\254\
\106\002\000\000\000\000\101\000\101\000\101\000\000\000\101\000\
\101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
\101\000\101\000\101\000\093\255\085\255\079\255\000\000\101\000\
\000\000\045\255\013\255\106\002\070\255\070\255\000\000\000\000\
\100\001\100\001\055\255\055\255\055\255\055\255\067\001\122\002\
\017\255\094\255\097\255\098\255\106\002\000\000\000\000\086\255\
\017\255\101\255\000\000\039\255\058\255\102\255\000\000\000\000\
\000\000\033\255\000\000\110\255\111\255\112\255\118\255\101\000\
\114\255\121\255\122\255\145\001\000\000\000\000\000\000\000\000\
\113\255\000\000\161\001\101\000\101\000\101\000\000\000\104\255\
\108\255\000\000\254\001\232\000\017\002\101\000\000\000\124\255\
\101\000\101\000\126\255\036\002\000\000\182\001\090\002\000\000\
\128\255\144\255\101\000\101\000\180\255\000\000\096\255\055\002\
\074\002\000\000\216\255\130\255\131\255\132\255\000\000\000\000\
\000\000\000\000\252\255\032\000\068\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\115\255\035\255\000\000\000\000\000\000\
\000\000\000\000\000\000\150\000\000\000\137\255\000\000\000\000\
\009\255\000\000\000\000\078\255\035\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\001\183\000\216\000\000\000\000\000\
\215\001\219\001\009\001\042\001\075\001\108\001\252\001\013\001\
\000\000\000\000\000\000\000\000\010\255\000\000\000\000\138\255\
\000\000\000\000\000\000\137\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\061\000\242\255\186\255\000\000\141\000\064\000\000\000\
\211\255\000\000\000\000\000\000"

let yytablesize = 922
let yytable = "\029\000\
\011\000\056\000\080\000\056\000\036\000\057\000\033\000\034\000\
\035\000\037\000\085\000\002\000\003\000\001\000\002\000\003\000\
\002\000\003\000\056\000\005\000\079\000\033\000\033\000\060\000\
\038\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\091\000\008\000\021\000\
\001\000\077\000\001\000\092\000\093\000\094\000\013\000\078\000\
\014\000\095\000\056\000\022\000\054\000\055\000\030\000\023\000\
\016\000\017\000\018\000\019\000\113\000\088\000\024\000\025\000\
\031\000\015\000\005\000\096\000\097\000\031\000\098\000\099\000\
\040\000\041\000\042\000\043\000\026\000\027\000\028\000\130\000\
\001\000\107\000\133\000\001\000\052\000\075\000\076\000\074\000\
\139\000\042\000\043\000\084\000\031\000\115\000\116\000\117\000\
\058\000\059\000\147\000\148\000\149\000\073\000\081\000\124\000\
\082\000\083\000\126\000\127\000\086\000\089\000\103\000\104\000\
\119\000\105\000\021\000\108\000\136\000\137\000\092\000\093\000\
\094\000\106\000\109\000\110\000\095\000\118\000\022\000\125\000\
\112\000\128\000\023\000\134\000\140\000\144\000\145\000\146\000\
\034\000\024\000\025\000\036\000\037\000\005\000\096\000\097\000\
\006\000\098\000\099\000\087\000\135\000\000\000\021\000\026\000\
\027\000\028\000\092\000\093\000\094\000\000\000\000\000\000\000\
\095\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\025\000\000\000\
\000\000\005\000\096\000\097\000\000\000\098\000\099\000\000\000\
\138\000\000\000\021\000\026\000\027\000\028\000\092\000\093\000\
\094\000\000\000\000\000\000\000\095\000\000\000\022\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\025\000\000\000\000\000\005\000\096\000\097\000\
\000\000\098\000\099\000\000\000\143\000\000\000\021\000\026\000\
\027\000\028\000\092\000\093\000\094\000\000\000\000\000\000\000\
\095\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\025\000\000\000\
\000\000\005\000\096\000\097\000\000\000\098\000\099\000\000\000\
\150\000\000\000\021\000\026\000\027\000\028\000\092\000\093\000\
\094\000\000\000\010\000\056\000\095\000\000\000\022\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\025\000\000\000\000\000\005\000\096\000\097\000\
\000\000\098\000\099\000\000\000\151\000\000\000\021\000\026\000\
\027\000\028\000\092\000\093\000\094\000\000\000\000\000\000\000\
\095\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\025\000\000\000\
\000\000\005\000\096\000\097\000\000\000\098\000\099\000\000\000\
\152\000\000\000\021\000\026\000\027\000\028\000\092\000\093\000\
\094\000\000\000\000\000\000\000\095\000\000\000\022\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\025\000\000\000\000\000\005\000\096\000\097\000\
\000\000\098\000\099\000\021\000\043\000\000\000\043\000\026\000\
\027\000\028\000\043\000\043\000\043\000\000\000\000\000\022\000\
\043\000\000\000\043\000\023\000\000\000\000\000\043\000\000\000\
\000\000\000\000\024\000\025\000\000\000\043\000\043\000\000\000\
\000\000\043\000\043\000\043\000\000\000\043\000\043\000\000\000\
\026\000\027\000\028\000\043\000\043\000\043\000\011\000\000\000\
\011\000\000\000\000\000\011\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\011\000\011\000\000\000\000\000\011\000\
\011\000\011\000\011\000\000\000\000\000\011\000\011\000\011\000\
\011\000\011\000\011\000\000\000\000\000\011\000\011\000\023\000\
\000\000\023\000\000\000\000\000\023\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\023\000\023\000\000\000\000\000\
\023\000\023\000\000\000\000\000\000\000\000\000\023\000\023\000\
\023\000\023\000\023\000\023\000\000\000\000\000\023\000\023\000\
\024\000\000\000\024\000\000\000\000\000\024\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\024\000\024\000\000\000\
\121\000\024\000\024\000\000\000\000\000\000\000\000\000\024\000\
\024\000\024\000\024\000\024\000\024\000\122\000\000\000\024\000\
\024\000\040\000\041\000\042\000\043\000\000\000\000\000\044\000\
\045\000\046\000\047\000\048\000\049\000\000\000\000\000\050\000\
\051\000\025\000\000\000\025\000\000\000\032\000\025\000\032\000\
\025\000\000\000\032\000\000\000\032\000\000\000\025\000\025\000\
\000\000\000\000\032\000\032\000\000\000\000\000\000\000\000\000\
\025\000\025\000\025\000\025\000\025\000\025\000\000\000\000\000\
\025\000\025\000\027\000\000\000\027\000\032\000\033\000\027\000\
\033\000\027\000\000\000\033\000\000\000\033\000\000\000\027\000\
\027\000\000\000\000\000\033\000\033\000\000\000\000\000\000\000\
\000\000\027\000\027\000\027\000\027\000\027\000\027\000\000\000\
\000\000\027\000\027\000\026\000\000\000\026\000\000\000\000\000\
\026\000\000\000\026\000\000\000\040\000\041\000\042\000\043\000\
\026\000\026\000\044\000\045\000\046\000\047\000\048\000\049\000\
\000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
\000\000\000\000\026\000\026\000\028\000\000\000\028\000\000\000\
\000\000\028\000\000\000\028\000\000\000\040\000\041\000\042\000\
\043\000\028\000\028\000\000\000\039\000\046\000\047\000\048\000\
\049\000\000\000\000\000\028\000\028\000\028\000\028\000\028\000\
\028\000\000\000\000\000\028\000\028\000\040\000\041\000\042\000\
\043\000\111\000\000\000\044\000\045\000\046\000\047\000\048\000\
\049\000\000\000\000\000\050\000\051\000\000\000\000\000\000\000\
\000\000\114\000\040\000\041\000\042\000\043\000\000\000\000\000\
\044\000\045\000\046\000\047\000\048\000\049\000\000\000\000\000\
\050\000\051\000\040\000\041\000\042\000\043\000\131\000\000\000\
\044\000\045\000\046\000\047\000\048\000\049\000\000\000\000\000\
\050\000\051\000\000\000\000\000\000\000\000\000\000\000\040\000\
\041\000\042\000\043\000\000\000\000\000\044\000\045\000\046\000\
\047\000\048\000\049\000\000\000\000\000\050\000\051\000\030\000\
\000\000\030\000\000\000\029\000\030\000\029\000\030\000\000\000\
\029\000\000\000\029\000\000\000\030\000\030\000\000\000\000\000\
\029\000\029\000\000\000\000\000\000\000\000\000\030\000\030\000\
\000\000\000\000\029\000\029\000\000\000\000\000\030\000\030\000\
\000\000\000\000\029\000\029\000\031\000\000\000\031\000\000\000\
\120\000\031\000\000\000\031\000\000\000\000\000\000\000\000\000\
\000\000\031\000\031\000\000\000\000\000\000\000\000\000\040\000\
\041\000\042\000\043\000\123\000\000\000\044\000\045\000\046\000\
\047\000\048\000\049\000\031\000\031\000\050\000\051\000\000\000\
\000\000\000\000\040\000\041\000\042\000\043\000\129\000\000\000\
\044\000\045\000\046\000\047\000\048\000\049\000\000\000\000\000\
\050\000\051\000\000\000\000\000\000\000\040\000\041\000\042\000\
\043\000\141\000\000\000\044\000\045\000\046\000\047\000\048\000\
\049\000\000\000\000\000\050\000\051\000\000\000\000\000\000\000\
\040\000\041\000\042\000\043\000\142\000\000\000\044\000\045\000\
\046\000\047\000\048\000\049\000\000\000\000\000\050\000\051\000\
\000\000\000\000\000\000\040\000\041\000\042\000\043\000\000\000\
\000\000\044\000\045\000\046\000\047\000\048\000\049\000\000\000\
\132\000\050\000\051\000\040\000\041\000\042\000\043\000\000\000\
\000\000\044\000\045\000\046\000\047\000\048\000\049\000\000\000\
\000\000\050\000\051\000\040\000\041\000\042\000\043\000\000\000\
\000\000\044\000\045\000\046\000\047\000\048\000\049\000\000\000\
\000\000\050\000\051\000\040\000\041\000\042\000\043\000\000\000\
\000\000\044\000\045\000\046\000\047\000\048\000\049\000\000\000\
\000\000\050\000"

let yycheck = "\014\000\
\000\000\000\000\073\000\006\001\002\001\008\001\021\000\022\000\
\023\000\007\001\081\000\003\001\003\001\001\000\006\001\006\001\
\008\001\008\001\006\001\034\001\008\001\036\000\037\000\038\000\
\022\001\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\005\001\046\001\007\001\
\006\001\056\000\008\001\011\001\012\001\013\001\009\001\003\001\
\022\001\017\001\006\001\019\001\007\001\008\001\002\001\023\001\
\040\001\041\001\042\001\043\001\106\000\004\001\030\001\031\001\
\007\001\046\001\034\001\035\001\036\001\007\001\038\001\039\001\
\018\001\019\001\020\001\021\001\044\001\045\001\046\001\125\000\
\003\001\096\000\128\000\006\001\046\001\007\001\008\001\003\001\
\134\000\020\001\021\001\006\001\007\001\108\000\109\000\110\000\
\036\000\037\000\144\000\145\000\146\000\009\001\009\001\118\000\
\008\001\008\001\121\000\122\000\008\001\008\001\001\001\001\001\
\005\001\002\001\007\001\002\001\131\000\132\000\011\001\012\001\
\013\001\004\001\002\001\002\001\017\001\022\001\019\001\004\001\
\016\001\004\001\023\001\004\001\037\001\004\001\004\001\004\001\
\022\001\030\001\031\001\003\001\003\001\034\001\035\001\036\001\
\004\000\038\001\039\001\084\000\005\001\255\255\007\001\044\001\
\045\001\046\001\011\001\012\001\013\001\255\255\255\255\255\255\
\017\001\255\255\019\001\255\255\255\255\255\255\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\031\001\255\255\
\255\255\034\001\035\001\036\001\255\255\038\001\039\001\255\255\
\005\001\255\255\007\001\044\001\045\001\046\001\011\001\012\001\
\013\001\255\255\255\255\255\255\017\001\255\255\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\031\001\255\255\255\255\034\001\035\001\036\001\
\255\255\038\001\039\001\255\255\005\001\255\255\007\001\044\001\
\045\001\046\001\011\001\012\001\013\001\255\255\255\255\255\255\
\017\001\255\255\019\001\255\255\255\255\255\255\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\031\001\255\255\
\255\255\034\001\035\001\036\001\255\255\038\001\039\001\255\255\
\005\001\255\255\007\001\044\001\045\001\046\001\011\001\012\001\
\013\001\255\255\010\001\010\001\017\001\255\255\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\031\001\255\255\255\255\034\001\035\001\036\001\
\255\255\038\001\039\001\255\255\005\001\255\255\007\001\044\001\
\045\001\046\001\011\001\012\001\013\001\255\255\255\255\255\255\
\017\001\255\255\019\001\255\255\255\255\255\255\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\031\001\255\255\
\255\255\034\001\035\001\036\001\255\255\038\001\039\001\255\255\
\005\001\255\255\007\001\044\001\045\001\046\001\011\001\012\001\
\013\001\255\255\255\255\255\255\017\001\255\255\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\031\001\255\255\255\255\034\001\035\001\036\001\
\255\255\038\001\039\001\007\001\005\001\255\255\007\001\044\001\
\045\001\046\001\011\001\012\001\013\001\255\255\255\255\019\001\
\017\001\255\255\019\001\023\001\255\255\255\255\023\001\255\255\
\255\255\255\255\030\001\031\001\255\255\030\001\031\001\255\255\
\255\255\034\001\035\001\036\001\255\255\038\001\039\001\255\255\
\044\001\045\001\046\001\044\001\045\001\046\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\008\001\255\255\255\255\
\255\255\255\255\255\255\014\001\015\001\255\255\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\032\001\033\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\008\001\255\255\
\255\255\255\255\255\255\255\255\014\001\015\001\255\255\255\255\
\018\001\019\001\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\032\001\033\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\255\255\
\001\001\018\001\019\001\255\255\255\255\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\014\001\255\255\032\001\
\033\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\032\001\
\033\001\001\001\255\255\003\001\255\255\001\001\006\001\003\001\
\008\001\255\255\006\001\255\255\008\001\255\255\014\001\015\001\
\255\255\255\255\014\001\015\001\255\255\255\255\255\255\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\032\001\033\001\001\001\255\255\003\001\033\001\001\001\006\001\
\003\001\008\001\255\255\006\001\255\255\008\001\255\255\014\001\
\015\001\255\255\255\255\014\001\015\001\255\255\255\255\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\032\001\033\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\008\001\255\255\018\001\019\001\020\001\021\001\
\014\001\015\001\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\032\001\033\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\008\001\255\255\018\001\019\001\020\001\
\021\001\014\001\015\001\255\255\001\001\026\001\027\001\028\001\
\029\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\032\001\033\001\018\001\019\001\020\001\
\021\001\001\001\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\001\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\032\001\033\001\018\001\019\001\020\001\021\001\001\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\032\001\033\001\001\001\
\255\255\003\001\255\255\001\001\006\001\003\001\008\001\255\255\
\006\001\255\255\008\001\255\255\014\001\015\001\255\255\255\255\
\014\001\015\001\255\255\255\255\255\255\255\255\024\001\025\001\
\255\255\255\255\024\001\025\001\255\255\255\255\032\001\033\001\
\255\255\255\255\032\001\033\001\001\001\255\255\003\001\255\255\
\003\001\006\001\255\255\008\001\255\255\255\255\255\255\255\255\
\255\255\014\001\015\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\003\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\032\001\033\001\032\001\033\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\003\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\032\001\033\001\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\003\001\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\003\001\255\255\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\032\001\033\001\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\015\001\032\001\033\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\032\001\033\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\032\001\033\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\032\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LSQUARE\000\
  RSQUARE\000\
  COLON\000\
  FUN\000\
  CONTINUE\000\
  BREAK\000\
  PARALLEL\000\
  TO\000\
  BY\000\
  INVOCATIONS\000\
  ATOMIC\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  VAR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  FLOAT\000\
  EOF\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  FLOATLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 28 "parser.mly"
           ( [] )
# 496 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "parser.mly"
       ( [_1] )
# 503 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 30 "parser.mly"
                        ( _3::_1 )
# 511 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
      ( Int )
# 517 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
        ( Float )
# 523 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
       ( Bool )
# 529 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
       ( Void )
# 535 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    Obj.repr(
# 37 "parser.mly"
                            ( Array1(_1) )
# 542 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'type_name) in
    Obj.repr(
# 38 "parser.mly"
                                            ( Array2(_1) )
# 549 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'type_name) in
    Obj.repr(
# 39 "parser.mly"
                                                            ( Array3(_1) )
# 556 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 42 "parser.mly"
   ( Id(_1) )
# 563 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 43 "parser.mly"
             ( Literal(_1) )
# 570 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 44 "parser.mly"
               ( FloatLit(_1) )
# 577 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
       ( BoolLit(true) )
# 583 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
        ( BoolLit(false) )
# 589 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 47 "parser.mly"
                            ( ArrayLit(_2) )
# 596 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 48 "parser.mly"
                               ( Access(_1,_3)  )
# 604 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 49 "parser.mly"
                              ( Call(_1,_3)  )
# 612 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                       ( Unop( Neg, _2) )
# 619 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
           ( Unop( Not, _2) )
# 626 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                  ( Binop( _1, Mult, _3) )
# 634 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                   ( Binop( _1, Div, _3)  )
# 642 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                 ( Binop( _1, Add, _3) )
# 650 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                  ( Binop( _1, Sub, _3) )
# 658 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
               ( Binop( _1, Less, _3) )
# 666 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
               ( Binop( _1, Greater, _3) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                ( Binop( _1, Leq, _3) )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                ( Binop( _1, Geq, _3) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                ( Binop( _1, Neq, _3) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
               ( Binop( _1, Equal, _3) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                ( Binop( _1, And, _3) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
               ( Binop( _1, Or, _3) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                 ( Assign(_1, _3) )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 67 "parser.mly"
                   ( (_1,_3) )
# 738 "parser.ml"
               : 'binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'binding) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                               ( Decl(_2,_4) )
# 746 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
             ( [] )
# 752 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 73 "parser.mly"
                     ( [(_1,_3)] )
# 760 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'params_list) in
    Obj.repr(
# 74 "parser.mly"
                                       ( (_1,_3)::_5 )
# 769 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'params_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 77 "parser.mly"
                                                                              ( { fname=_2;formals=_4;typ=_7;body=_9} )
# 779 "parser.ml"
               : 'fun_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                ( [] )
# 785 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 80 "parser.mly"
                           ( _2::_1 )
# 793 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
           ( Expr(_1) )
# 800 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 84 "parser.mly"
                                                                  ( If(_3,_6,[]) )
# 808 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'statement_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 85 "parser.mly"
                                                                                       ( If(_3,_6,_10)  )
# 817 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 86 "parser.mly"
                                                        ( While(_3,_6) )
# 825 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 87 "parser.mly"
                                                                       ( For(_3,_5,_7,_10) )
# 835 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 88 "parser.mly"
                                                                           ( For(_3,_5,_7,_10) )
# 845 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                    ( Return(_2) )
# 852 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
             ( Break )
# 858 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                ( Continue )
# 864 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 92 "parser.mly"
       ( DecStmt(_1) )
# 871 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 93 "parser.mly"
                                                                               ( Parallel(_5,_8) )
# 879 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 94 "parser.mly"
                                      ( Atomic(_3) )
# 886 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
            ( [] )
# 892 "parser.ml"
               : 'decls_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 97 "parser.mly"
                  ( _2::_1 )
# 900 "parser.ml"
               : 'decls_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
              ( [] )
# 906 "parser.ml"
               : 'fdecls_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fdecls_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_decl) in
    Obj.repr(
# 100 "parser.mly"
                       ( _2::_1 )
# 914 "parser.ml"
               : 'fdecls_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decls_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fdecls_list) in
    Obj.repr(
# 103 "parser.mly"
                           ( Prog(_1,_2) )
# 922 "parser.ml"
               : Ast.prog))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.prog)
