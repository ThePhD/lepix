type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LSQUARE
  | RSQUARE
  | COLON
  | FUN
  | CONTINUE
  | BREAK
  | PARALLEL
  | TO
  | BY
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | VAR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | FLOAT
  | INTLITERAL of (int)
  | FLOATLITERAL of (float)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 53 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LSQUARE *);
  264 (* RSQUARE *);
  265 (* COLON *);
  266 (* FUN *);
  267 (* CONTINUE *);
  268 (* BREAK *);
  269 (* PARALLEL *);
  270 (* TO *);
  271 (* BY *);
  272 (* PLUS *);
  273 (* MINUS *);
  274 (* TIMES *);
  275 (* DIVIDE *);
  276 (* ASSIGN *);
  277 (* NOT *);
  278 (* EQ *);
  279 (* NEQ *);
  280 (* LT *);
  281 (* LEQ *);
  282 (* GT *);
  283 (* GEQ *);
  284 (* TRUE *);
  285 (* FALSE *);
  286 (* AND *);
  287 (* OR *);
  288 (* VAR *);
  289 (* RETURN *);
  290 (* IF *);
  291 (* ELSE *);
  292 (* FOR *);
  293 (* WHILE *);
  294 (* INT *);
  295 (* BOOL *);
  296 (* VOID *);
  297 (* FLOAT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  298 (* INTLITERAL *);
  299 (* FLOATLITERAL *);
  300 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\005\000\006\000\007\000\007\000\007\000\008\000\009\000\009\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\001\000\000\000"

let yylen = "\002\000\
\000\000\001\000\003\000\001\000\001\000\001\000\001\000\003\000\
\005\000\007\000\001\000\001\000\001\000\001\000\001\000\004\000\
\004\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\005\000\000\000\003\000\005\000\010\000\000\000\002\000\
\002\000\007\000\011\000\007\000\011\000\011\000\003\000\002\000\
\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\015\000\
\000\000\000\000\000\000\000\000\012\000\013\000\000\000\051\000\
\000\000\000\000\049\000\048\000\018\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\021\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\016\000\039\000\000\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\044\000\000\000\000\000\000\000\039\000\
\039\000\039\000\000\000\000\000\000\000\043\000\046\000\045\000"

let yydgoto = "\002\000\
\016\000\048\000\017\000\000\000\000\000\000\000\000\000\000\000\
\076\000\081\000"

let yysindex = "\009\000\
\201\255\000\000\015\255\018\255\254\255\254\255\000\000\000\000\
\254\255\025\255\038\255\056\255\000\000\000\000\254\254\000\000\
\234\000\020\000\000\000\000\000\000\000\000\000\253\000\254\255\
\254\255\254\255\254\255\254\255\254\255\000\000\254\255\254\255\
\254\255\254\255\254\255\254\255\254\255\254\255\254\255\254\255\
\254\255\254\255\000\000\000\000\041\001\094\000\070\001\009\255\
\137\001\043\255\137\001\067\255\067\255\000\000\000\000\149\000\
\149\000\026\255\026\255\026\255\026\255\119\000\153\001\042\255\
\254\255\254\255\051\255\000\000\254\255\000\000\000\000\016\001\
\121\001\000\000\137\001\036\255\254\255\254\255\071\255\046\255\
\000\000\087\001\104\001\000\000\073\255\083\255\086\255\000\000\
\000\000\000\000\105\255\139\255\173\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\255\044\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\255\000\000\151\255\225\255\076\000\000\000\000\000\002\000\
\047\001\125\000\156\000\187\000\218\000\088\255\053\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\255\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\032\000\253\255\000\000\000\000\000\000\000\000\000\000\
\035\000\070\000"

let yytablesize = 695
let yytable = "\027\000\
\042\000\021\000\022\000\002\000\028\000\023\000\002\000\003\000\
\002\000\001\000\003\000\068\000\003\000\001\000\069\000\019\000\
\001\000\029\000\020\000\043\000\045\000\046\000\047\000\049\000\
\049\000\051\000\024\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\025\000\
\080\000\031\000\032\000\033\000\034\000\071\000\003\000\004\000\
\069\000\001\000\070\000\001\000\005\000\031\000\074\000\031\000\
\006\000\026\000\031\000\050\000\031\000\072\000\073\000\007\000\
\008\000\075\000\031\000\031\000\009\000\010\000\018\000\011\000\
\012\000\082\000\083\000\084\000\088\000\013\000\014\000\015\000\
\085\000\003\000\004\000\031\000\033\000\034\000\089\000\005\000\
\030\000\090\000\030\000\006\000\000\000\030\000\000\000\030\000\
\000\000\000\000\007\000\008\000\000\000\030\000\030\000\009\000\
\010\000\000\000\011\000\012\000\079\000\094\000\000\000\000\000\
\013\000\014\000\015\000\003\000\004\000\030\000\030\000\000\000\
\000\000\005\000\091\000\092\000\093\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\008\000\000\000\000\000\
\000\000\009\000\010\000\000\000\011\000\012\000\000\000\095\000\
\000\000\000\000\013\000\014\000\015\000\003\000\004\000\032\000\
\000\000\032\000\000\000\005\000\032\000\000\000\032\000\006\000\
\000\000\000\000\000\000\000\000\032\000\032\000\007\000\008\000\
\000\000\000\000\000\000\009\000\010\000\000\000\011\000\012\000\
\000\000\096\000\000\000\000\000\013\000\014\000\015\000\003\000\
\004\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\008\000\000\000\000\000\000\000\009\000\010\000\000\000\
\011\000\012\000\000\000\003\000\004\000\000\000\013\000\014\000\
\015\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\022\000\000\000\022\000\007\000\008\000\022\000\000\000\
\022\000\009\000\010\000\000\000\011\000\012\000\022\000\022\000\
\022\000\022\000\013\000\014\000\015\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\000\000\000\000\022\000\022\000\
\000\000\000\000\029\000\000\000\029\000\042\000\000\000\029\000\
\000\000\029\000\000\000\042\000\042\000\000\000\005\000\029\000\
\029\000\042\000\006\000\000\000\000\000\042\000\000\000\029\000\
\029\000\007\000\008\000\000\000\042\000\042\000\000\000\029\000\
\029\000\042\000\042\000\000\000\042\000\042\000\000\000\013\000\
\014\000\015\000\042\000\042\000\042\000\011\000\000\000\011\000\
\000\000\000\000\011\000\000\000\011\000\000\000\000\000\000\000\
\000\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\
\000\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\
\000\000\000\000\011\000\011\000\023\000\000\000\023\000\000\000\
\000\000\023\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\023\000\023\000\023\000\023\000\000\000\065\000\000\000\
\000\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\000\000\023\000\023\000\066\000\000\000\031\000\032\000\033\000\
\034\000\000\000\000\000\035\000\036\000\037\000\038\000\039\000\
\040\000\000\000\000\000\041\000\042\000\024\000\000\000\024\000\
\000\000\000\000\024\000\000\000\024\000\000\000\031\000\032\000\
\033\000\034\000\024\000\024\000\035\000\036\000\037\000\038\000\
\039\000\040\000\024\000\024\000\024\000\024\000\024\000\024\000\
\000\000\000\000\024\000\024\000\026\000\000\000\026\000\000\000\
\000\000\026\000\000\000\026\000\031\000\032\000\033\000\034\000\
\000\000\026\000\026\000\000\000\037\000\038\000\039\000\040\000\
\000\000\026\000\026\000\026\000\026\000\026\000\026\000\000\000\
\000\000\026\000\026\000\025\000\000\000\025\000\000\000\000\000\
\025\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\
\025\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\000\025\000\025\000\025\000\025\000\025\000\000\000\000\000\
\025\000\025\000\027\000\000\000\027\000\000\000\000\000\027\000\
\000\000\027\000\000\000\000\000\000\000\000\000\000\000\027\000\
\027\000\000\000\030\000\000\000\000\000\000\000\000\000\027\000\
\027\000\027\000\027\000\027\000\027\000\000\000\000\000\027\000\
\027\000\031\000\032\000\033\000\034\000\044\000\000\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\041\000\
\042\000\000\000\000\000\000\000\031\000\032\000\033\000\034\000\
\077\000\000\000\035\000\036\000\037\000\038\000\039\000\040\000\
\000\000\000\000\041\000\042\000\000\000\000\000\000\000\031\000\
\032\000\033\000\034\000\000\000\000\000\035\000\036\000\037\000\
\038\000\039\000\040\000\064\000\000\000\041\000\042\000\028\000\
\000\000\028\000\000\000\000\000\028\000\000\000\028\000\000\000\
\031\000\032\000\033\000\034\000\028\000\028\000\035\000\036\000\
\037\000\038\000\039\000\040\000\028\000\028\000\041\000\042\000\
\067\000\000\000\000\000\000\000\028\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\032\000\033\000\
\034\000\086\000\000\000\035\000\036\000\037\000\038\000\039\000\
\040\000\000\000\000\000\041\000\042\000\000\000\031\000\032\000\
\033\000\034\000\087\000\000\000\035\000\036\000\037\000\038\000\
\039\000\040\000\000\000\000\000\041\000\042\000\000\000\031\000\
\032\000\033\000\034\000\000\000\000\000\035\000\036\000\037\000\
\038\000\039\000\040\000\000\000\000\000\041\000\042\000\078\000\
\031\000\032\000\033\000\034\000\000\000\000\000\035\000\036\000\
\037\000\038\000\039\000\040\000\000\000\000\000\041\000\042\000\
\031\000\032\000\033\000\034\000\000\000\000\000\035\000\036\000\
\037\000\038\000\039\000\040\000\000\000\000\000\041\000\042\000\
\031\000\032\000\033\000\034\000\000\000\000\000\035\000\036\000\
\037\000\038\000\039\000\040\000\000\000\000\000\041\000"

let yycheck = "\002\001\
\000\000\005\000\006\000\003\001\007\001\009\000\006\001\003\001\
\008\001\001\000\006\001\003\001\008\001\003\001\006\001\001\001\
\006\001\020\001\001\001\000\000\024\000\025\000\026\000\027\000\
\028\000\029\000\002\001\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\002\001\
\005\001\016\001\017\001\018\001\019\001\004\001\011\001\012\001\
\006\001\006\001\008\001\008\001\017\001\001\001\004\001\003\001\
\021\001\002\001\006\001\028\000\008\001\065\000\066\000\028\001\
\029\001\069\000\014\001\015\001\033\001\034\001\001\000\036\001\
\037\001\077\000\078\000\005\001\004\001\042\001\043\001\044\001\
\035\001\011\001\012\001\031\001\018\001\019\001\004\001\017\001\
\001\001\004\001\003\001\021\001\255\255\006\001\255\255\008\001\
\255\255\255\255\028\001\029\001\255\255\014\001\015\001\033\001\
\034\001\255\255\036\001\037\001\074\000\005\001\255\255\255\255\
\042\001\043\001\044\001\011\001\012\001\030\001\031\001\255\255\
\255\255\017\001\088\000\089\000\090\000\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\255\255\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\005\001\
\255\255\255\255\042\001\043\001\044\001\011\001\012\001\001\001\
\255\255\003\001\255\255\017\001\006\001\255\255\008\001\021\001\
\255\255\255\255\255\255\255\255\014\001\015\001\028\001\029\001\
\255\255\255\255\255\255\033\001\034\001\255\255\036\001\037\001\
\255\255\005\001\255\255\255\255\042\001\043\001\044\001\011\001\
\012\001\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\255\255\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\255\255\255\255\255\255\033\001\034\001\255\255\
\036\001\037\001\255\255\011\001\012\001\255\255\042\001\043\001\
\044\001\017\001\255\255\255\255\255\255\021\001\255\255\255\255\
\255\255\001\001\255\255\003\001\028\001\029\001\006\001\255\255\
\008\001\033\001\034\001\255\255\036\001\037\001\014\001\015\001\
\016\001\017\001\042\001\043\001\044\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\031\001\
\255\255\255\255\001\001\255\255\003\001\005\001\255\255\006\001\
\255\255\008\001\255\255\011\001\012\001\255\255\017\001\014\001\
\015\001\017\001\021\001\255\255\255\255\021\001\255\255\022\001\
\023\001\028\001\029\001\255\255\028\001\029\001\255\255\030\001\
\031\001\033\001\034\001\255\255\036\001\037\001\255\255\042\001\
\043\001\044\001\042\001\043\001\044\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\255\255\255\255\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\030\001\031\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\008\001\255\255\255\255\255\255\255\255\
\255\255\014\001\015\001\016\001\017\001\255\255\001\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\030\001\031\001\014\001\255\255\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\030\001\031\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\255\255\016\001\017\001\
\018\001\019\001\014\001\015\001\022\001\023\001\024\001\025\001\
\026\001\027\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\030\001\031\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\008\001\016\001\017\001\018\001\019\001\
\255\255\014\001\015\001\255\255\024\001\025\001\026\001\027\001\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\030\001\031\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\008\001\255\255\255\255\255\255\255\255\255\255\
\014\001\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\030\001\031\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\014\001\
\015\001\255\255\001\001\255\255\255\255\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\030\001\
\031\001\016\001\017\001\018\001\019\001\001\001\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\001\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\030\001\031\001\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\003\001\255\255\030\001\031\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\008\001\255\255\
\016\001\017\001\018\001\019\001\014\001\015\001\022\001\023\001\
\024\001\025\001\026\001\027\001\022\001\023\001\030\001\031\001\
\003\001\255\255\255\255\255\255\030\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\003\001\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\030\001\031\001\255\255\016\001\017\001\
\018\001\019\001\003\001\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\030\001\031\001\255\255\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\030\001\031\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\031\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001\031\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\030\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LSQUARE\000\
  RSQUARE\000\
  COLON\000\
  FUN\000\
  CONTINUE\000\
  BREAK\000\
  PARALLEL\000\
  TO\000\
  BY\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  VAR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  FLOAT\000\
  EOF\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  FLOATLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 28 "parser.mly"
           ( [] )
# 409 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "parser.mly"
       ( [_1] )
# 416 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 30 "parser.mly"
                        ( _3::_1 )
# 424 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
      ( Int )
# 430 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
        ( Float )
# 436 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
       ( Bool )
# 442 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
       ( Void )
# 448 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    Obj.repr(
# 37 "parser.mly"
                            ( Array(_1) )
# 455 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'type_name) in
    Obj.repr(
# 38 "parser.mly"
                                            ( Array(Array(_1)) )
# 462 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'type_name) in
    Obj.repr(
# 39 "parser.mly"
                                                             ( Array(Array(Array(_1))) )
# 469 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 42 "parser.mly"
   ( Id(_1) )
# 476 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 43 "parser.mly"
             ( Literal(_1) )
# 483 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 44 "parser.mly"
               ( FloatLit(_1) )
# 490 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
       ( BoolLit(true) )
# 496 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
        ( BoolLit(false) )
# 502 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 47 "parser.mly"
                               ( Access(_1,_3)  )
# 510 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 48 "parser.mly"
                              ( Call(_1,_3)  )
# 518 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                       ( Unop( Neg, _2) )
# 525 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
           ( Unop( Not, _2) )
# 532 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                  ( Binop( _1, Mult, _3) )
# 540 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                   ( Binop( _1, Div, _3)  )
# 548 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                 ( Binop( _1, Add, _3) )
# 556 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                  ( Binop( _1, Sub, _3) )
# 564 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
               ( Binop( _1, Less, _3) )
# 572 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
               ( Binop( _1, Greater, _3) )
# 580 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                ( Binop( _1, Leq, _3) )
# 588 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                ( Binop( _1, Geq, _3) )
# 596 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                ( Binop( _1, Neq, _3) )
# 604 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
               ( Binop( _1, Equal, _3) )
# 612 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                ( Binop( _1, And, _3) )
# 620 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
               ( Binop( _1, Or, _3) )
# 628 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                 ( Assign(_1, _3) )
# 636 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 66 "parser.mly"
                   ( (_1,_3) )
# 644 "parser.ml"
               : 'binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'binding) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                               ( Assign(fst _2,_4) )
# 652 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
             ( [] )
# 658 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 72 "parser.mly"
                     ( [(_1,_3)] )
# 666 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'params_list) in
    Obj.repr(
# 73 "parser.mly"
                                       ( (_1,_3)::_5 )
# 675 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'params_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 76 "parser.mly"
                                                                              ( { fname=_2;formals=_4;typ=_7;body=_9} )
# 685 "parser.ml"
               : 'fun_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                ( [] )
# 691 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 79 "parser.mly"
                           ( _2::_1 )
# 699 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
           ( Expr(_1) )
# 706 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 83 "parser.mly"
                                                                  ( If(_3,_6,[]) )
# 714 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'statement_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 84 "parser.mly"
                                                                                       ( If(_3,_6,_10)  )
# 723 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 85 "parser.mly"
                                                        ( While(_3,_6) )
# 731 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 86 "parser.mly"
                                                                       ( For(_3,_5,_7,_10) )
# 741 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 87 "parser.mly"
                                                                           ( For(_3,_5,_7,_10) )
# 751 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                    ( Return(_2) )
# 758 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
             ( Break )
# 764 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                ( Continue )
# 770 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 104 "parser.mly"
               ( _1 )
# 777 "parser.ml"
               : Ast.stmt))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.stmt)
