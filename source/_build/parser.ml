type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LSQUARE
  | RSQUARE
  | COLON
  | FUN
  | CONTINUE
  | BREAK
  | PARALLEL
  | TO
  | BY
  | INVOCATIONS
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | VAR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | FLOAT
  | INTLITERAL of (int)
  | FLOATLITERAL of (float)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 54 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LSQUARE *);
  264 (* RSQUARE *);
  265 (* COLON *);
  266 (* FUN *);
  267 (* CONTINUE *);
  268 (* BREAK *);
  269 (* PARALLEL *);
  270 (* TO *);
  271 (* BY *);
  272 (* INVOCATIONS *);
  273 (* PLUS *);
  274 (* MINUS *);
  275 (* TIMES *);
  276 (* DIVIDE *);
  277 (* ASSIGN *);
  278 (* NOT *);
  279 (* EQ *);
  280 (* NEQ *);
  281 (* LT *);
  282 (* LEQ *);
  283 (* GT *);
  284 (* GEQ *);
  285 (* TRUE *);
  286 (* FALSE *);
  287 (* AND *);
  288 (* OR *);
  289 (* VAR *);
  290 (* RETURN *);
  291 (* IF *);
  292 (* ELSE *);
  293 (* FOR *);
  294 (* WHILE *);
  295 (* INT *);
  296 (* BOOL *);
  297 (* VOID *);
  298 (* FLOAT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  299 (* INTLITERAL *);
  300 (* FLOATLITERAL *);
  301 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\005\000\006\000\007\000\007\000\007\000\008\000\009\000\
\009\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\011\000\011\000\012\000\012\000\
\001\000\000\000"

let yylen = "\002\000\
\000\000\001\000\003\000\001\000\001\000\001\000\001\000\003\000\
\005\000\007\000\001\000\001\000\001\000\001\000\001\000\003\000\
\004\000\004\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\005\000\000\000\003\000\005\000\010\000\000\000\
\002\000\002\000\007\000\011\000\007\000\011\000\011\000\003\000\
\002\000\002\000\001\000\009\000\000\000\002\000\000\000\002\000\
\003\000\002\000"

let yydefred = "\000\000\
\053\000\000\000\058\000\000\000\000\000\054\000\000\000\000\000\
\000\000\000\000\057\000\056\000\000\000\000\000\000\000\004\000\
\006\000\007\000\005\000\000\000\000\000\000\000\000\000\014\000\
\015\000\012\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\020\000\000\000\000\000\000\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\021\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\018\000\017\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\038\000\040\000\
\010\000\000\000\039\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\000\041\000\050\000\049\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\048\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\040\000\000\000\000\000\000\000\045\000\000\000\000\000\
\000\000\000\000\052\000\040\000\040\000\040\000\000\000\000\000\
\000\000\044\000\047\000\046\000"

let yydgoto = "\002\000\
\003\000\032\000\099\000\020\000\009\000\100\000\053\000\012\000\
\090\000\101\000\004\000\007\000"

let yysindex = "\015\000\
\000\000\000\000\000\000\243\254\250\254\000\000\001\000\051\255\
\048\255\019\255\000\000\000\000\017\255\043\255\088\255\000\000\
\000\000\000\000\000\000\093\255\043\255\043\255\043\255\000\000\
\000\000\000\000\000\000\004\255\074\001\060\255\040\255\253\254\
\054\002\000\000\000\000\043\255\043\255\043\255\000\000\043\255\
\043\255\043\255\043\255\043\255\043\255\043\255\043\255\043\255\
\043\255\043\255\043\255\097\255\107\255\046\255\000\000\043\255\
\000\000\015\255\035\255\054\002\055\255\055\255\000\000\000\000\
\018\001\018\001\065\255\065\255\065\255\065\255\243\000\070\002\
\017\255\098\255\113\255\115\255\054\002\000\000\000\000\073\255\
\017\255\116\255\000\000\060\255\045\255\117\255\000\000\000\000\
\000\000\033\255\000\000\111\255\126\255\127\255\043\255\128\255\
\129\255\130\255\094\001\000\000\000\000\000\000\000\000\112\255\
\114\001\043\255\043\255\043\255\000\000\114\255\000\000\204\001\
\186\000\222\001\043\255\132\255\043\255\043\255\136\255\240\001\
\000\000\134\001\038\002\000\000\141\255\104\255\043\255\043\255\
\139\255\000\000\118\255\002\002\020\002\000\000\174\255\155\255\
\158\255\159\255\000\000\000\000\000\000\000\000\209\255\244\255\
\023\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\122\255\083\255\000\000\000\000\000\000\
\000\000\000\000\000\000\103\000\000\000\153\255\000\000\000\000\
\007\255\000\000\000\000\092\255\083\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\152\255\135\000\167\000\000\000\000\000\
\166\001\170\001\218\000\250\000\026\001\058\001\202\001\222\000\
\000\000\000\000\000\000\000\000\011\255\000\000\000\000\161\255\
\000\000\000\000\000\000\153\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\060\000\242\255\187\255\000\000\161\000\086\000\000\000\
\234\255\000\000\000\000\000\000"

let yytablesize = 869
let yytable = "\029\000\
\011\000\055\000\056\000\080\000\057\000\036\000\033\000\034\000\
\035\000\002\000\037\000\085\000\002\000\003\000\002\000\001\000\
\003\000\078\000\003\000\005\000\056\000\033\000\033\000\060\000\
\038\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\091\000\008\000\021\000\
\056\000\077\000\079\000\092\000\093\000\094\000\054\000\055\000\
\088\000\021\000\022\000\031\000\075\000\076\000\023\000\016\000\
\017\000\018\000\019\000\013\000\022\000\024\000\025\000\015\000\
\023\000\005\000\095\000\096\000\014\000\097\000\098\000\024\000\
\025\000\042\000\043\000\026\000\027\000\028\000\084\000\031\000\
\105\000\040\000\041\000\042\000\043\000\026\000\027\000\028\000\
\001\000\030\000\001\000\112\000\113\000\114\000\001\000\058\000\
\059\000\001\000\126\000\031\000\120\000\129\000\122\000\123\000\
\052\000\073\000\081\000\135\000\131\000\074\000\021\000\102\000\
\132\000\133\000\092\000\093\000\094\000\143\000\144\000\145\000\
\082\000\022\000\083\000\086\000\089\000\023\000\103\000\110\000\
\104\000\106\000\107\000\108\000\024\000\025\000\115\000\121\000\
\005\000\095\000\096\000\124\000\097\000\098\000\034\000\134\000\
\130\000\021\000\026\000\027\000\028\000\092\000\093\000\094\000\
\033\000\136\000\033\000\036\000\022\000\033\000\140\000\033\000\
\023\000\141\000\142\000\037\000\006\000\033\000\033\000\024\000\
\025\000\087\000\000\000\005\000\095\000\096\000\000\000\097\000\
\098\000\000\000\139\000\000\000\021\000\026\000\027\000\028\000\
\092\000\093\000\094\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\025\000\000\000\000\000\005\000\095\000\
\096\000\000\000\097\000\098\000\000\000\146\000\000\000\021\000\
\026\000\027\000\028\000\092\000\093\000\094\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\025\000\000\000\
\000\000\005\000\095\000\096\000\000\000\097\000\098\000\000\000\
\147\000\000\000\021\000\026\000\027\000\028\000\092\000\093\000\
\094\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\000\000\023\000\010\000\055\000\000\000\000\000\000\000\000\000\
\024\000\025\000\000\000\000\000\005\000\095\000\096\000\000\000\
\097\000\098\000\000\000\148\000\000\000\021\000\026\000\027\000\
\028\000\092\000\093\000\094\000\000\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\025\000\000\000\000\000\005\000\
\095\000\096\000\000\000\097\000\098\000\000\000\043\000\000\000\
\043\000\026\000\027\000\028\000\043\000\043\000\043\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\043\000\
\000\000\000\000\043\000\043\000\043\000\000\000\043\000\043\000\
\000\000\000\000\000\000\000\000\043\000\043\000\043\000\011\000\
\000\000\011\000\000\000\000\000\011\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\011\000\011\000\000\000\011\000\
\011\000\011\000\011\000\000\000\000\000\011\000\011\000\011\000\
\011\000\011\000\011\000\000\000\000\000\011\000\011\000\023\000\
\000\000\023\000\000\000\000\000\023\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\023\000\023\000\000\000\023\000\
\023\000\000\000\000\000\000\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\000\000\023\000\023\000\024\000\
\000\000\024\000\000\000\000\000\024\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\024\000\024\000\000\000\024\000\
\024\000\000\000\117\000\000\000\000\000\024\000\024\000\024\000\
\024\000\024\000\024\000\000\000\000\000\024\000\024\000\118\000\
\000\000\000\000\040\000\041\000\042\000\043\000\000\000\000\000\
\044\000\045\000\046\000\047\000\048\000\049\000\000\000\000\000\
\050\000\051\000\025\000\000\000\025\000\000\000\032\000\025\000\
\032\000\025\000\000\000\032\000\000\000\032\000\000\000\025\000\
\025\000\000\000\000\000\032\000\032\000\000\000\000\000\000\000\
\025\000\025\000\025\000\025\000\025\000\025\000\000\000\000\000\
\025\000\025\000\027\000\000\000\027\000\032\000\000\000\027\000\
\000\000\027\000\000\000\040\000\041\000\042\000\043\000\027\000\
\027\000\044\000\045\000\046\000\047\000\048\000\049\000\000\000\
\027\000\027\000\027\000\027\000\027\000\027\000\000\000\000\000\
\027\000\027\000\026\000\000\000\026\000\000\000\000\000\026\000\
\000\000\026\000\040\000\041\000\042\000\043\000\000\000\026\000\
\026\000\000\000\046\000\047\000\048\000\049\000\000\000\000\000\
\026\000\026\000\026\000\026\000\026\000\026\000\000\000\000\000\
\026\000\026\000\028\000\000\000\028\000\000\000\000\000\028\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\028\000\
\028\000\000\000\039\000\000\000\000\000\000\000\000\000\000\000\
\028\000\028\000\028\000\028\000\028\000\028\000\000\000\000\000\
\028\000\028\000\040\000\041\000\042\000\043\000\109\000\000\000\
\044\000\045\000\046\000\047\000\048\000\049\000\000\000\000\000\
\050\000\051\000\000\000\000\000\000\000\000\000\040\000\041\000\
\042\000\043\000\111\000\000\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\050\000\051\000\000\000\000\000\
\000\000\000\000\040\000\041\000\042\000\043\000\127\000\000\000\
\044\000\045\000\046\000\047\000\048\000\049\000\000\000\000\000\
\050\000\051\000\000\000\000\000\000\000\000\000\040\000\041\000\
\042\000\043\000\000\000\000\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\050\000\051\000\030\000\000\000\
\030\000\000\000\029\000\030\000\029\000\030\000\000\000\029\000\
\000\000\029\000\000\000\030\000\030\000\000\000\000\000\029\000\
\029\000\000\000\000\000\000\000\030\000\030\000\000\000\000\000\
\029\000\029\000\000\000\000\000\030\000\030\000\000\000\000\000\
\029\000\029\000\031\000\000\000\031\000\000\000\116\000\031\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\031\000\
\031\000\000\000\000\000\000\000\040\000\041\000\042\000\043\000\
\119\000\000\000\044\000\045\000\046\000\047\000\048\000\049\000\
\031\000\031\000\050\000\051\000\000\000\000\000\040\000\041\000\
\042\000\043\000\125\000\000\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\050\000\051\000\000\000\000\000\
\040\000\041\000\042\000\043\000\137\000\000\000\044\000\045\000\
\046\000\047\000\048\000\049\000\000\000\000\000\050\000\051\000\
\000\000\000\000\040\000\041\000\042\000\043\000\138\000\000\000\
\044\000\045\000\046\000\047\000\048\000\049\000\000\000\000\000\
\050\000\051\000\000\000\000\000\040\000\041\000\042\000\043\000\
\000\000\000\000\044\000\045\000\046\000\047\000\048\000\049\000\
\000\000\000\000\050\000\051\000\128\000\000\000\040\000\041\000\
\042\000\043\000\000\000\000\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\050\000\051\000\040\000\041\000\
\042\000\043\000\000\000\000\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\050\000\051\000\040\000\041\000\
\042\000\043\000\000\000\000\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\050\000"

let yycheck = "\014\000\
\000\000\000\000\006\001\073\000\008\001\002\001\021\000\022\000\
\023\000\003\001\007\001\081\000\006\001\003\001\008\001\001\000\
\006\001\003\001\008\001\033\001\006\001\036\000\037\000\038\000\
\021\001\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\005\001\045\001\007\001\
\006\001\056\000\008\001\011\001\012\001\013\001\007\001\008\001\
\004\001\007\001\018\001\007\001\007\001\008\001\022\001\039\001\
\040\001\041\001\042\001\009\001\018\001\029\001\030\001\045\001\
\022\001\033\001\034\001\035\001\021\001\037\001\038\001\029\001\
\030\001\019\001\020\001\043\001\044\001\045\001\006\001\007\001\
\095\000\017\001\018\001\019\001\020\001\043\001\044\001\045\001\
\006\001\002\001\008\001\106\000\107\000\108\000\003\001\036\000\
\037\000\006\001\121\000\007\001\115\000\124\000\117\000\118\000\
\045\001\009\001\009\001\130\000\005\001\003\001\007\001\001\001\
\127\000\128\000\011\001\012\001\013\001\140\000\141\000\142\000\
\008\001\018\001\008\001\008\001\008\001\022\001\001\001\016\001\
\002\001\002\001\002\001\002\001\029\001\030\001\021\001\004\001\
\033\001\034\001\035\001\004\001\037\001\038\001\021\001\005\001\
\004\001\007\001\043\001\044\001\045\001\011\001\012\001\013\001\
\001\001\036\001\003\001\003\001\018\001\006\001\004\001\008\001\
\022\001\004\001\004\001\003\001\004\000\014\001\015\001\029\001\
\030\001\084\000\255\255\033\001\034\001\035\001\255\255\037\001\
\038\001\255\255\005\001\255\255\007\001\043\001\044\001\045\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\034\001\
\035\001\255\255\037\001\038\001\255\255\005\001\255\255\007\001\
\043\001\044\001\045\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\255\255\037\001\038\001\255\255\
\005\001\255\255\007\001\043\001\044\001\045\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\018\001\255\255\255\255\
\255\255\022\001\010\001\010\001\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\034\001\035\001\255\255\
\037\001\038\001\255\255\005\001\255\255\007\001\043\001\044\001\
\045\001\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\033\001\
\034\001\035\001\255\255\037\001\038\001\255\255\005\001\255\255\
\007\001\043\001\044\001\045\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\034\001\035\001\255\255\037\001\038\001\
\255\255\255\255\255\255\255\255\043\001\044\001\045\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\008\001\255\255\
\255\255\255\255\255\255\255\255\014\001\015\001\255\255\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\032\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\008\001\255\255\
\255\255\255\255\255\255\255\255\014\001\015\001\255\255\017\001\
\018\001\255\255\255\255\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\032\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\008\001\255\255\
\255\255\255\255\255\255\255\255\014\001\015\001\255\255\017\001\
\018\001\255\255\001\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\032\001\014\001\
\255\255\255\255\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\001\001\255\255\003\001\255\255\001\001\006\001\
\003\001\008\001\255\255\006\001\255\255\008\001\255\255\014\001\
\015\001\255\255\255\255\014\001\015\001\255\255\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\001\001\255\255\003\001\032\001\255\255\006\001\
\255\255\008\001\255\255\017\001\018\001\019\001\020\001\014\001\
\015\001\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\008\001\017\001\018\001\019\001\020\001\255\255\014\001\
\015\001\255\255\025\001\026\001\027\001\028\001\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\014\001\
\015\001\255\255\001\001\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\017\001\018\001\019\001\020\001\001\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\001\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\001\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\001\001\255\255\
\003\001\255\255\001\001\006\001\003\001\008\001\255\255\006\001\
\255\255\008\001\255\255\014\001\015\001\255\255\255\255\014\001\
\015\001\255\255\255\255\255\255\023\001\024\001\255\255\255\255\
\023\001\024\001\255\255\255\255\031\001\032\001\255\255\255\255\
\031\001\032\001\001\001\255\255\003\001\255\255\003\001\006\001\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\014\001\
\015\001\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\003\001\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\031\001\032\001\031\001\032\001\255\255\255\255\017\001\018\001\
\019\001\020\001\003\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\255\255\255\255\
\017\001\018\001\019\001\020\001\003\001\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\031\001\032\001\
\255\255\255\255\017\001\018\001\019\001\020\001\003\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\255\255\255\255\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\031\001\032\001\015\001\255\255\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LSQUARE\000\
  RSQUARE\000\
  COLON\000\
  FUN\000\
  CONTINUE\000\
  BREAK\000\
  PARALLEL\000\
  TO\000\
  BY\000\
  INVOCATIONS\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  VAR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  FLOAT\000\
  EOF\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  FLOATLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 28 "parser.mly"
           ( [] )
# 479 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "parser.mly"
       ( [_1] )
# 486 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 30 "parser.mly"
                        ( _3::_1 )
# 494 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
      ( Int )
# 500 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
        ( Float )
# 506 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
       ( Bool )
# 512 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
       ( Void )
# 518 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    Obj.repr(
# 37 "parser.mly"
                            ( Array(_1) )
# 525 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'type_name) in
    Obj.repr(
# 38 "parser.mly"
                                            ( Array(Array(_1)) )
# 532 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'type_name) in
    Obj.repr(
# 39 "parser.mly"
                                                            ( Array(Array(Array(_1))) )
# 539 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 42 "parser.mly"
   ( Id(_1) )
# 546 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 43 "parser.mly"
             ( Literal(_1) )
# 553 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 44 "parser.mly"
               ( FloatLit(_1) )
# 560 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
       ( BoolLit(true) )
# 566 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
        ( BoolLit(false) )
# 572 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 47 "parser.mly"
                            ( ArrayLit(_2) )
# 579 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 48 "parser.mly"
                               ( Access(_1,_3)  )
# 587 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 49 "parser.mly"
                              ( Call(_1,_3)  )
# 595 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                       ( Unop( Neg, _2) )
# 602 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
           ( Unop( Not, _2) )
# 609 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                  ( Binop( _1, Mult, _3) )
# 617 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                   ( Binop( _1, Div, _3)  )
# 625 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                 ( Binop( _1, Add, _3) )
# 633 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                  ( Binop( _1, Sub, _3) )
# 641 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
               ( Binop( _1, Less, _3) )
# 649 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
               ( Binop( _1, Greater, _3) )
# 657 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                ( Binop( _1, Leq, _3) )
# 665 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                ( Binop( _1, Geq, _3) )
# 673 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                ( Binop( _1, Neq, _3) )
# 681 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
               ( Binop( _1, Equal, _3) )
# 689 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                ( Binop( _1, And, _3) )
# 697 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
               ( Binop( _1, Or, _3) )
# 705 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                 ( Assign(_1, _3) )
# 713 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 67 "parser.mly"
                   ( (_1,_3) )
# 721 "parser.ml"
               : 'binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'binding) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                               ( Decl(_2,_4) )
# 729 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
             ( [] )
# 735 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 73 "parser.mly"
                     ( [(_1,_3)] )
# 743 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'params_list) in
    Obj.repr(
# 74 "parser.mly"
                                       ( (_1,_3)::_5 )
# 752 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'params_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 77 "parser.mly"
                                                                              ( { fname=_2;formals=_4;typ=_7;body=_9} )
# 762 "parser.ml"
               : 'fun_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                ( [] )
# 768 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 80 "parser.mly"
                           ( _2::_1 )
# 776 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
           ( Expr(_1) )
# 783 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 84 "parser.mly"
                                                                  ( If(_3,_6,[]) )
# 791 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'statement_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 85 "parser.mly"
                                                                                       ( If(_3,_6,_10)  )
# 800 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 86 "parser.mly"
                                                        ( While(_3,_6) )
# 808 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 87 "parser.mly"
                                                                       ( For(_3,_5,_7,_10) )
# 818 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 88 "parser.mly"
                                                                           ( For(_3,_5,_7,_10) )
# 828 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                    ( Return(_2) )
# 835 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
             ( Break )
# 841 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                ( Continue )
# 847 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 92 "parser.mly"
       ( DecStmt(_1) )
# 854 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 93 "parser.mly"
                                                                               ( Parallel(_5,_8) )
# 862 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
            ( [] )
# 868 "parser.ml"
               : 'decls_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 96 "parser.mly"
                  ( _2::_1 )
# 876 "parser.ml"
               : 'decls_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
              ( [] )
# 882 "parser.ml"
               : 'fdecls_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fdecls_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_decl) in
    Obj.repr(
# 99 "parser.mly"
                       ( _2::_1 )
# 890 "parser.ml"
               : 'fdecls_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decls_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fdecls_list) in
    Obj.repr(
# 102 "parser.mly"
                           ( Prog(_1,_2) )
# 898 "parser.ml"
               : Ast.prog))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.prog)
