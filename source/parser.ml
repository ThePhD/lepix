type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | DOT
  | LSQUARE
  | RSQUARE
  | COLON
  | FUN
  | CONTINUE
  | BREAK
  | PARALLEL
  | TO
  | BY
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | TILDE
  | AS
  | VAR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | FLOAT
  | INTLITERAL of (int)
  | FLOATLITERAL of (float)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 56 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* DOT *);
  264 (* LSQUARE *);
  265 (* RSQUARE *);
  266 (* COLON *);
  267 (* FUN *);
  268 (* CONTINUE *);
  269 (* BREAK *);
  270 (* PARALLEL *);
  271 (* TO *);
  272 (* BY *);
  273 (* PLUS *);
  274 (* MINUS *);
  275 (* TIMES *);
  276 (* DIVIDE *);
  277 (* ASSIGN *);
  278 (* NOT *);
  279 (* EQ *);
  280 (* NEQ *);
  281 (* LT *);
  282 (* LEQ *);
  283 (* GT *);
  284 (* GEQ *);
  285 (* TRUE *);
  286 (* FALSE *);
  287 (* AND *);
  288 (* OR *);
  289 (* TILDE *);
  290 (* AS *);
  291 (* VAR *);
  292 (* RETURN *);
  293 (* IF *);
  294 (* ELSE *);
  295 (* FOR *);
  296 (* WHILE *);
  297 (* INT *);
  298 (* BOOL *);
  299 (* VOID *);
  300 (* FLOAT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* INTLITERAL *);
  302 (* FLOATLITERAL *);
  303 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\005\000\006\000\007\000\007\000\007\000\009\000\009\000\009\000\
\009\000\009\000\009\000\010\000\001\000\001\000\001\000\001\000\
\001\000\008\000\015\000\015\000\011\000\011\000\012\000\012\000\
\012\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\000\000\001\000\003\000\001\000\001\000\001\000\001\000\003\000\
\005\000\007\000\001\000\001\000\001\000\001\000\001\000\004\000\
\004\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\006\000\008\000\000\000\003\000\005\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\000\000\001\000\001\000\004\000\
\004\000\003\000\001\000\005\000\005\000\007\000\005\000\009\000\
\009\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\015\000\000\000\000\000\000\000\000\000\000\000\012\000\013\000\
\000\000\000\000\000\000\046\000\043\000\047\000\038\000\039\000\
\040\000\041\000\042\000\000\000\060\000\059\000\018\000\019\000\
\000\000\058\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\006\000\007\000\005\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\016\000\048\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\000\000\000\000\000\000\000\055\000\
\003\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\000\000\054\000\000\000\000\000\037\000\034\000\000\000\009\000\
\000\000\000\000\000\000\000\000\052\000\057\000\056\000\010\000"

let yydgoto = "\002\000\
\018\000\060\000\019\000\084\000\020\000\021\000\079\000\100\000\
\022\000\023\000\024\000\025\000\026\000\027\000\101\000"

let yysindex = "\010\000\
\070\255\000\000\238\254\079\255\083\255\048\255\048\255\000\000\
\000\000\040\255\048\255\096\255\110\255\120\255\000\000\000\000\
\053\255\122\255\107\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\134\255\000\000\000\000\000\000\000\000\
\130\255\000\000\048\255\048\255\048\255\048\255\048\255\048\255\
\070\255\000\000\048\255\048\255\048\255\048\255\048\255\048\255\
\048\255\048\255\048\255\048\255\048\255\048\255\090\255\060\255\
\145\255\255\254\163\255\138\255\073\001\133\255\089\001\142\255\
\148\255\044\255\044\255\000\000\000\000\059\000\059\000\101\255\
\101\255\101\255\101\255\227\255\105\001\146\255\154\255\000\000\
\000\000\000\000\000\000\000\255\055\255\048\255\048\255\055\255\
\000\000\048\255\000\000\000\000\000\000\060\255\150\255\063\255\
\048\255\070\255\165\255\000\000\136\255\127\255\243\000\000\000\
\000\000\004\255\060\255\082\255\000\000\089\001\008\255\048\255\
\055\255\048\255\048\255\090\255\052\255\166\255\169\255\000\000\
\176\255\000\000\181\255\211\255\000\000\000\000\187\255\000\000\
\188\255\055\255\055\255\193\255\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\185\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\194\255\201\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\200\255\000\000\
\000\000\000\000\000\000\000\000\059\255\000\000\072\001\000\000\
\000\000\033\000\065\000\000\000\000\000\225\000\249\000\097\000\
\129\000\161\000\193\000\030\001\054\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\074\255\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\208\255\000\000\000\000\000\000\007\000\000\000\194\255\
\000\000\000\000\000\000\200\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\117\000\220\255\255\255\190\255\175\000\000\000\101\000\159\255\
\177\000\208\000\000\000\000\000\000\000\000\000\183\255"

let yytablesize = 648
let yytable = "\086\000\
\011\000\045\000\062\000\053\000\031\000\032\000\033\000\096\000\
\041\000\116\000\001\000\096\000\120\000\087\000\104\000\043\000\
\044\000\045\000\046\000\126\000\097\000\047\000\048\000\049\000\
\050\000\051\000\052\000\106\000\028\000\053\000\054\000\133\000\
\022\000\057\000\058\000\059\000\061\000\061\000\063\000\122\000\
\117\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\105\000\038\000\098\000\
\134\000\135\000\098\000\096\000\039\000\002\000\045\000\046\000\
\023\000\006\000\001\000\002\000\099\000\007\000\108\000\109\000\
\001\000\040\000\045\000\121\000\008\000\009\000\045\000\029\000\
\003\000\004\000\005\000\030\000\102\000\103\000\033\000\006\000\
\061\000\118\000\119\000\007\000\015\000\016\000\017\000\110\000\
\024\000\035\000\008\000\009\000\080\000\081\000\082\000\083\000\
\010\000\011\000\012\000\042\000\013\000\014\000\061\000\036\000\
\123\000\124\000\015\000\016\000\017\000\043\000\044\000\045\000\
\046\000\037\000\041\000\043\000\044\000\045\000\046\000\114\000\
\026\000\047\000\048\000\049\000\050\000\051\000\052\000\055\000\
\078\000\053\000\054\000\056\000\089\000\091\000\092\000\043\000\
\044\000\045\000\046\000\085\000\093\000\047\000\048\000\049\000\
\050\000\051\000\052\000\094\000\095\000\053\000\054\000\107\000\
\025\000\043\000\044\000\045\000\046\000\088\000\112\000\047\000\
\048\000\049\000\050\000\051\000\052\000\113\000\127\000\053\000\
\054\000\128\000\129\000\043\000\044\000\045\000\046\000\130\000\
\061\000\047\000\048\000\049\000\050\000\051\000\052\000\098\000\
\027\000\053\000\054\000\132\000\001\000\043\000\044\000\045\000\
\046\000\136\000\035\000\047\000\048\000\049\000\050\000\051\000\
\052\000\001\000\036\000\053\000\054\000\131\000\111\000\064\000\
\125\000\065\000\034\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\043\000\044\000\045\000\046\000\000\000\
\000\000\047\000\048\000\049\000\050\000\051\000\052\000\000\000\
\000\000\053\000\054\000\043\000\044\000\045\000\046\000\000\000\
\028\000\047\000\048\000\049\000\050\000\051\000\052\000\000\000\
\000\000\011\000\045\000\011\000\053\000\011\000\011\000\033\000\
\053\000\011\000\000\000\033\000\000\000\000\000\000\000\011\000\
\011\000\011\000\011\000\011\000\011\000\000\000\000\000\011\000\
\011\000\011\000\011\000\011\000\011\000\030\000\000\000\011\000\
\011\000\022\000\000\000\022\000\000\000\022\000\022\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\022\000\
\022\000\022\000\022\000\000\000\000\000\031\000\000\000\022\000\
\022\000\022\000\022\000\022\000\022\000\000\000\000\000\022\000\
\022\000\023\000\000\000\023\000\000\000\023\000\023\000\032\000\
\000\000\023\000\000\000\043\000\044\000\045\000\046\000\023\000\
\023\000\023\000\023\000\049\000\050\000\051\000\052\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\000\000\023\000\
\023\000\024\000\000\000\024\000\000\000\024\000\024\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\024\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\024\000\024\000\024\000\024\000\024\000\000\000\000\000\024\000\
\024\000\026\000\000\000\026\000\000\000\026\000\026\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\026\000\
\026\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\026\000\026\000\026\000\026\000\026\000\000\000\000\000\026\000\
\026\000\025\000\000\000\025\000\000\000\025\000\025\000\000\000\
\000\000\025\000\000\000\000\000\000\000\000\000\000\000\025\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\025\000\025\000\025\000\025\000\025\000\000\000\000\000\025\000\
\025\000\027\000\000\000\027\000\000\000\027\000\027\000\000\000\
\000\000\027\000\000\000\000\000\000\000\000\000\000\000\027\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\027\000\027\000\027\000\027\000\027\000\000\000\000\000\027\000\
\027\000\029\000\000\000\029\000\000\000\029\000\029\000\000\000\
\000\000\029\000\000\000\000\000\000\000\000\000\000\000\029\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
\029\000\028\000\000\000\028\000\000\000\028\000\028\000\029\000\
\029\000\028\000\115\000\043\000\044\000\045\000\046\000\028\000\
\028\000\047\000\048\000\049\000\050\000\051\000\052\000\028\000\
\028\000\053\000\054\000\000\000\000\000\000\000\000\000\028\000\
\028\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\
\030\000\000\000\030\000\030\000\000\000\000\000\030\000\000\000\
\000\000\000\000\000\000\000\000\030\000\030\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\
\031\000\000\000\031\000\031\000\030\000\030\000\031\000\000\000\
\000\000\000\000\000\000\000\000\031\000\031\000\000\000\000\000\
\032\000\000\000\032\000\000\000\032\000\032\000\090\000\000\000\
\032\000\000\000\000\000\000\000\000\000\031\000\032\000\032\000\
\000\000\043\000\044\000\045\000\046\000\000\000\000\000\047\000\
\048\000\049\000\050\000\051\000\052\000\000\000\000\000\053\000\
\054\000\043\000\044\000\045\000\046\000\000\000\000\000\047\000\
\048\000\049\000\050\000\051\000\052\000\000\000\000\000\053\000\
\054\000\043\000\044\000\045\000\046\000\000\000\000\000\047\000\
\048\000\049\000\050\000\051\000\052\000\000\000\000\000\053\000"

let yycheck = "\001\001\
\000\000\000\000\039\000\000\000\006\000\007\000\000\000\008\001\
\001\001\006\001\001\000\008\001\005\001\015\001\088\000\017\001\
\018\001\019\001\020\001\117\000\021\001\023\001\024\001\025\001\
\026\001\027\001\028\001\094\000\047\001\031\001\032\001\129\000\
\000\000\035\000\036\000\037\000\038\000\039\000\040\000\113\000\
\107\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\090\000\002\001\004\001\
\130\000\131\000\004\001\008\001\008\001\003\001\019\001\020\001\
\000\000\018\001\003\001\009\001\014\001\022\001\008\001\009\001\
\009\001\021\001\001\001\112\000\029\001\030\001\005\001\001\001\
\011\001\012\001\013\001\001\001\086\000\087\000\047\001\018\001\
\090\000\008\001\009\001\022\001\045\001\046\001\047\001\097\000\
\000\000\002\001\029\001\030\001\041\001\042\001\043\001\044\001\
\035\001\036\001\037\001\001\001\039\001\040\001\112\000\002\001\
\114\000\115\000\045\001\046\001\047\001\017\001\018\001\019\001\
\020\001\002\001\001\001\017\001\018\001\019\001\020\001\001\001\
\000\000\023\001\024\001\025\001\026\001\027\001\028\001\002\001\
\047\001\031\001\032\001\010\001\003\001\009\001\001\001\017\001\
\018\001\019\001\020\001\003\001\001\001\023\001\024\001\025\001\
\026\001\027\001\028\001\010\001\003\001\031\001\032\001\010\001\
\000\000\017\001\018\001\019\001\020\001\003\001\002\001\023\001\
\024\001\025\001\026\001\027\001\028\001\038\001\009\001\031\001\
\032\001\009\001\003\001\017\001\018\001\019\001\020\001\003\001\
\000\000\023\001\024\001\025\001\026\001\027\001\028\001\004\001\
\000\000\031\001\032\001\009\001\003\001\017\001\018\001\019\001\
\020\001\009\001\003\001\023\001\024\001\025\001\026\001\027\001\
\028\001\009\001\003\001\031\001\032\001\003\001\098\000\041\000\
\116\000\041\000\011\000\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\017\001\018\001\019\001\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\255\255\031\001\032\001\017\001\018\001\019\001\020\001\255\255\
\000\000\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\255\255\001\001\001\001\003\001\001\001\005\001\006\001\001\001\
\005\001\009\001\255\255\005\001\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\000\000\255\255\031\001\
\032\001\001\001\255\255\003\001\255\255\005\001\006\001\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\255\255\255\255\000\000\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\001\001\255\255\003\001\255\255\005\001\006\001\000\000\
\255\255\009\001\255\255\017\001\018\001\019\001\020\001\015\001\
\016\001\017\001\018\001\025\001\026\001\027\001\028\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\001\001\255\255\003\001\255\255\005\001\006\001\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\001\001\255\255\003\001\255\255\005\001\006\001\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\001\001\255\255\003\001\255\255\005\001\006\001\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\001\001\255\255\003\001\255\255\005\001\006\001\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\001\001\255\255\003\001\255\255\005\001\006\001\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\001\001\255\255\003\001\255\255\005\001\006\001\031\001\
\032\001\009\001\016\001\017\001\018\001\019\001\020\001\015\001\
\016\001\023\001\024\001\025\001\026\001\027\001\028\001\023\001\
\024\001\031\001\032\001\255\255\255\255\255\255\255\255\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\005\001\006\001\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\005\001\006\001\031\001\032\001\009\001\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\255\255\255\255\
\001\001\255\255\003\001\255\255\005\001\006\001\006\001\255\255\
\009\001\255\255\255\255\255\255\255\255\032\001\015\001\016\001\
\255\255\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  DOT\000\
  LSQUARE\000\
  RSQUARE\000\
  COLON\000\
  FUN\000\
  CONTINUE\000\
  BREAK\000\
  PARALLEL\000\
  TO\000\
  BY\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  TILDE\000\
  AS\000\
  VAR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  FLOAT\000\
  EOF\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  FLOATLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 28 "parser.mly"
           ( [] )
# 423 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "parser.mly"
       ( [_1] )
# 430 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 30 "parser.mly"
                      ( 0 )
# 438 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
      ( Int )
# 444 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
        ( Float )
# 450 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
       ( Bool )
# 456 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
       ( Void )
# 462 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    Obj.repr(
# 37 "parser.mly"
                            ( 0 )
# 469 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'type_name) in
    Obj.repr(
# 38 "parser.mly"
                                            ( 0 )
# 476 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'type_name) in
    Obj.repr(
# 39 "parser.mly"
                                                             ( 0 )
# 483 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 42 "parser.mly"
   ( Id(_1) )
# 490 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 43 "parser.mly"
             ( Literal(_1) )
# 497 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 44 "parser.mly"
               ( FloatLit(_1) )
# 504 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
       ( BoolLit(true) )
# 510 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
        ( BoolLit(false) )
# 516 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 47 "parser.mly"
                               ( Access(_1,_3)  )
# 524 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 48 "parser.mly"
                              ( Call(_1,_3)  )
# 532 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                       ( Unop( Neg, _2) )
# 539 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
           ( Unop( Not, _2) )
# 546 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                  ( Binop( _1, Mult, _3) )
# 554 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                   ( Binop( _1, Div, _3)  )
# 562 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                 ( Binop( _1, Add, _3) )
# 570 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                  ( Binop( _1, Sub, _3) )
# 578 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
               ( Binop( _1, Less, _3) )
# 586 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
               ( Binop( _1, Greater, _3) )
# 594 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                ( Binop( _1, Leq, _3) )
# 602 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                ( Binop( _1, Geq, _3) )
# 610 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                ( Binop( _1, Neq, _3) )
# 618 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
               ( Binop( _1, Eq, _3) )
# 626 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                ( Binop( _1, And, _3) )
# 634 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
               ( Binop( _1, Or, _3) )
# 642 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                 ( Assign(_1, _3) )
# 650 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                                   ( 0 )
# 659 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'params_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'type_name) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 69 "parser.mly"
                                                       ( 0 )
# 669 "parser.ml"
               : 'fun_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
             ( 0 )
# 675 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 72 "parser.mly"
                     ( 0 )
# 683 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'params_list) in
    Obj.repr(
# 73 "parser.mly"
                                       ( 0 )
# 692 "parser.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_statement) in
    Obj.repr(
# 76 "parser.mly"
                 ( 0 )
# 699 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'branch_statement) in
    Obj.repr(
# 77 "parser.mly"
                   ( 0 )
# 706 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'iter_statement) in
    Obj.repr(
# 78 "parser.mly"
                 ( 0 )
# 713 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ret_statement) in
    Obj.repr(
# 79 "parser.mly"
                ( 0 )
# 720 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'jump_statement) in
    Obj.repr(
# 80 "parser.mly"
                 ( 0 )
# 727 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fun_decl) in
    Obj.repr(
# 81 "parser.mly"
           ( 0 )
# 734 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
            (0)
# 741 "parser.ml"
               : 'expr_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                     ( 0 )
# 747 "parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 87 "parser.mly"
       ( 0 )
# 754 "parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 88 "parser.mly"
            ( 0 )
# 761 "parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'decl) in
    Obj.repr(
# 89 "parser.mly"
                                    ( 0 )
# 769 "parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 90 "parser.mly"
                                         ( 0 )
# 777 "parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 93 "parser.mly"
                                 ( 0 )
# 784 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 96 "parser.mly"
      ( 0 )
# 791 "parser.ml"
               : 'parallel_block))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 97 "parser.mly"
                                         ( 0 )
# 799 "parser.ml"
               : 'parallel_block))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'parallel_block) in
    Obj.repr(
# 100 "parser.mly"
                                                  ( 0 )
# 807 "parser.ml"
               : 'branch_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'parallel_block) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'parallel_block) in
    Obj.repr(
# 101 "parser.mly"
                                                           ( 0 )
# 816 "parser.ml"
               : 'branch_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'parallel_block) in
    Obj.repr(
# 104 "parser.mly"
                                        ( 0 )
# 824 "parser.ml"
               : 'iter_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'parallel_block) in
    Obj.repr(
# 105 "parser.mly"
                                                         ( 0 )
# 834 "parser.ml"
               : 'iter_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'parallel_block) in
    Obj.repr(
# 106 "parser.mly"
                                                             ( 0 )
# 844 "parser.ml"
               : 'iter_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_statement) in
    Obj.repr(
# 109 "parser.mly"
                      ( 0 )
# 851 "parser.ml"
               : 'ret_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
           ( 0 )
# 857 "parser.ml"
               : 'jump_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
                ( 0 )
# 863 "parser.ml"
               : 'jump_statement))
(* Entry compound_statement *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let compound_statement (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : string)
