State 0:
program' -> . program [ # ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On RETURN shift to state 51
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On IF shift to state 55
-- On ID shift to state 7
-- On FOR shift to state 66
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On CONTINUE shift to state 77
-- On BREAK shift to state 79
-- On statement shift to state 92
-- On program shift to state 94
-- On expr shift to state 82

State 1:
statement -> WHILE . LPAREN expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On LPAREN shift to state 2

State 2:
statement -> WHILE LPAREN . expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 47

State 3:
expr -> TRUE . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TO reduce production expr -> TRUE 
-- On TIMES reduce production expr -> TRUE 
-- On SEMI reduce production expr -> TRUE 
-- On RSQUARE reduce production expr -> TRUE 
-- On RPAREN reduce production expr -> TRUE 
-- On PLUS reduce production expr -> TRUE 
-- On OR reduce production expr -> TRUE 
-- On NEQ reduce production expr -> TRUE 
-- On MINUS reduce production expr -> TRUE 
-- On LT reduce production expr -> TRUE 
-- On LEQ reduce production expr -> TRUE 
-- On GT reduce production expr -> TRUE 
-- On GEQ reduce production expr -> TRUE 
-- On EQ reduce production expr -> TRUE 
-- On DIVIDE reduce production expr -> TRUE 
-- On COMMA reduce production expr -> TRUE 
-- On BY reduce production expr -> TRUE 
-- On AND reduce production expr -> TRUE 

State 4:
expr -> NOT . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 46

State 5:
expr -> MINUS . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 45

State 6:
expr -> INTLITERAL . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TO reduce production expr -> INTLITERAL 
-- On TIMES reduce production expr -> INTLITERAL 
-- On SEMI reduce production expr -> INTLITERAL 
-- On RSQUARE reduce production expr -> INTLITERAL 
-- On RPAREN reduce production expr -> INTLITERAL 
-- On PLUS reduce production expr -> INTLITERAL 
-- On OR reduce production expr -> INTLITERAL 
-- On NEQ reduce production expr -> INTLITERAL 
-- On MINUS reduce production expr -> INTLITERAL 
-- On LT reduce production expr -> INTLITERAL 
-- On LEQ reduce production expr -> INTLITERAL 
-- On GT reduce production expr -> INTLITERAL 
-- On GEQ reduce production expr -> INTLITERAL 
-- On EQ reduce production expr -> INTLITERAL 
-- On DIVIDE reduce production expr -> INTLITERAL 
-- On COMMA reduce production expr -> INTLITERAL 
-- On BY reduce production expr -> INTLITERAL 
-- On AND reduce production expr -> INTLITERAL 

State 7:
expr -> ID . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> ID . LSQUARE args_list RSQUARE [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> ID . LPAREN args_list RPAREN [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> ID . ASSIGN expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On LSQUARE shift to state 8
-- On LPAREN shift to state 40
-- On ASSIGN shift to state 43
-- On TO reduce production expr -> ID 
-- On TIMES reduce production expr -> ID 
-- On SEMI reduce production expr -> ID 
-- On RSQUARE reduce production expr -> ID 
-- On RPAREN reduce production expr -> ID 
-- On PLUS reduce production expr -> ID 
-- On OR reduce production expr -> ID 
-- On NEQ reduce production expr -> ID 
-- On MINUS reduce production expr -> ID 
-- On LT reduce production expr -> ID 
-- On LEQ reduce production expr -> ID 
-- On GT reduce production expr -> ID 
-- On GEQ reduce production expr -> ID 
-- On EQ reduce production expr -> ID 
-- On DIVIDE reduce production expr -> ID 
-- On COMMA reduce production expr -> ID 
-- On BY reduce production expr -> ID 
-- On AND reduce production expr -> ID 

State 8:
expr -> ID LSQUARE . args_list RSQUARE [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 11
-- On args_list shift to state 36
-- On RSQUARE reduce production args_list -> 
-- On COMMA reduce production args_list -> 

State 9:
expr -> FLOATLITERAL . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TO reduce production expr -> FLOATLITERAL 
-- On TIMES reduce production expr -> FLOATLITERAL 
-- On SEMI reduce production expr -> FLOATLITERAL 
-- On RSQUARE reduce production expr -> FLOATLITERAL 
-- On RPAREN reduce production expr -> FLOATLITERAL 
-- On PLUS reduce production expr -> FLOATLITERAL 
-- On OR reduce production expr -> FLOATLITERAL 
-- On NEQ reduce production expr -> FLOATLITERAL 
-- On MINUS reduce production expr -> FLOATLITERAL 
-- On LT reduce production expr -> FLOATLITERAL 
-- On LEQ reduce production expr -> FLOATLITERAL 
-- On GT reduce production expr -> FLOATLITERAL 
-- On GEQ reduce production expr -> FLOATLITERAL 
-- On EQ reduce production expr -> FLOATLITERAL 
-- On DIVIDE reduce production expr -> FLOATLITERAL 
-- On COMMA reduce production expr -> FLOATLITERAL 
-- On BY reduce production expr -> FLOATLITERAL 
-- On AND reduce production expr -> FLOATLITERAL 

State 10:
expr -> FALSE . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TO reduce production expr -> FALSE 
-- On TIMES reduce production expr -> FALSE 
-- On SEMI reduce production expr -> FALSE 
-- On RSQUARE reduce production expr -> FALSE 
-- On RPAREN reduce production expr -> FALSE 
-- On PLUS reduce production expr -> FALSE 
-- On OR reduce production expr -> FALSE 
-- On NEQ reduce production expr -> FALSE 
-- On MINUS reduce production expr -> FALSE 
-- On LT reduce production expr -> FALSE 
-- On LEQ reduce production expr -> FALSE 
-- On GT reduce production expr -> FALSE 
-- On GEQ reduce production expr -> FALSE 
-- On EQ reduce production expr -> FALSE 
-- On DIVIDE reduce production expr -> FALSE 
-- On COMMA reduce production expr -> FALSE 
-- On BY reduce production expr -> FALSE 
-- On AND reduce production expr -> FALSE 

State 11:
args_list -> expr . [ RSQUARE RPAREN COMMA ]
expr -> expr . TIMES expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . PLUS expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . EQ expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34
-- On RSQUARE reduce production args_list -> expr 
-- On RPAREN reduce production args_list -> expr 
-- On COMMA reduce production args_list -> expr 

State 12:
expr -> expr TIMES . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 13

State 13:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr TIMES expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TO reduce production expr -> expr TIMES expr 
-- On TIMES reduce production expr -> expr TIMES expr 
-- On SEMI reduce production expr -> expr TIMES expr 
-- On RSQUARE reduce production expr -> expr TIMES expr 
-- On RPAREN reduce production expr -> expr TIMES expr 
-- On PLUS reduce production expr -> expr TIMES expr 
-- On OR reduce production expr -> expr TIMES expr 
-- On NEQ reduce production expr -> expr TIMES expr 
-- On MINUS reduce production expr -> expr TIMES expr 
-- On LT reduce production expr -> expr TIMES expr 
-- On LEQ reduce production expr -> expr TIMES expr 
-- On GT reduce production expr -> expr TIMES expr 
-- On GEQ reduce production expr -> expr TIMES expr 
-- On EQ reduce production expr -> expr TIMES expr 
-- On DIVIDE reduce production expr -> expr TIMES expr 
-- On COMMA reduce production expr -> expr TIMES expr 
-- On BY reduce production expr -> expr TIMES expr 
-- On AND reduce production expr -> expr TIMES expr 

State 14:
expr -> expr PLUS . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 15

State 15:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr PLUS expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TIMES shift to state 12
-- On DIVIDE shift to state 16
-- On TO reduce production expr -> expr PLUS expr 
-- On SEMI reduce production expr -> expr PLUS expr 
-- On RSQUARE reduce production expr -> expr PLUS expr 
-- On RPAREN reduce production expr -> expr PLUS expr 
-- On PLUS reduce production expr -> expr PLUS expr 
-- On OR reduce production expr -> expr PLUS expr 
-- On NEQ reduce production expr -> expr PLUS expr 
-- On MINUS reduce production expr -> expr PLUS expr 
-- On LT reduce production expr -> expr PLUS expr 
-- On LEQ reduce production expr -> expr PLUS expr 
-- On GT reduce production expr -> expr PLUS expr 
-- On GEQ reduce production expr -> expr PLUS expr 
-- On EQ reduce production expr -> expr PLUS expr 
-- On COMMA reduce production expr -> expr PLUS expr 
-- On BY reduce production expr -> expr PLUS expr 
-- On AND reduce production expr -> expr PLUS expr 

State 16:
expr -> expr DIVIDE . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 17

State 17:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr DIVIDE expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TO reduce production expr -> expr DIVIDE expr 
-- On TIMES reduce production expr -> expr DIVIDE expr 
-- On SEMI reduce production expr -> expr DIVIDE expr 
-- On RSQUARE reduce production expr -> expr DIVIDE expr 
-- On RPAREN reduce production expr -> expr DIVIDE expr 
-- On PLUS reduce production expr -> expr DIVIDE expr 
-- On OR reduce production expr -> expr DIVIDE expr 
-- On NEQ reduce production expr -> expr DIVIDE expr 
-- On MINUS reduce production expr -> expr DIVIDE expr 
-- On LT reduce production expr -> expr DIVIDE expr 
-- On LEQ reduce production expr -> expr DIVIDE expr 
-- On GT reduce production expr -> expr DIVIDE expr 
-- On GEQ reduce production expr -> expr DIVIDE expr 
-- On EQ reduce production expr -> expr DIVIDE expr 
-- On DIVIDE reduce production expr -> expr DIVIDE expr 
-- On COMMA reduce production expr -> expr DIVIDE expr 
-- On BY reduce production expr -> expr DIVIDE expr 
-- On AND reduce production expr -> expr DIVIDE expr 

State 18:
expr -> expr OR . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 19

State 19:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr OR expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34
-- On TO reduce production expr -> expr OR expr 
-- On SEMI reduce production expr -> expr OR expr 
-- On RSQUARE reduce production expr -> expr OR expr 
-- On RPAREN reduce production expr -> expr OR expr 
-- On OR reduce production expr -> expr OR expr 
-- On COMMA reduce production expr -> expr OR expr 
-- On BY reduce production expr -> expr OR expr 

State 20:
expr -> expr NEQ . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 21

State 21:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr NEQ expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On DIVIDE shift to state 16
-- On TO reduce production expr -> expr NEQ expr 
-- On SEMI reduce production expr -> expr NEQ expr 
-- On RSQUARE reduce production expr -> expr NEQ expr 
-- On RPAREN reduce production expr -> expr NEQ expr 
-- On OR reduce production expr -> expr NEQ expr 
-- On NEQ reduce production expr -> expr NEQ expr 
-- On EQ reduce production expr -> expr NEQ expr 
-- On COMMA reduce production expr -> expr NEQ expr 
-- On BY reduce production expr -> expr NEQ expr 
-- On AND reduce production expr -> expr NEQ expr 

State 22:
expr -> expr MINUS . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 23

State 23:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr MINUS expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TIMES shift to state 12
-- On DIVIDE shift to state 16
-- On TO reduce production expr -> expr MINUS expr 
-- On SEMI reduce production expr -> expr MINUS expr 
-- On RSQUARE reduce production expr -> expr MINUS expr 
-- On RPAREN reduce production expr -> expr MINUS expr 
-- On PLUS reduce production expr -> expr MINUS expr 
-- On OR reduce production expr -> expr MINUS expr 
-- On NEQ reduce production expr -> expr MINUS expr 
-- On MINUS reduce production expr -> expr MINUS expr 
-- On LT reduce production expr -> expr MINUS expr 
-- On LEQ reduce production expr -> expr MINUS expr 
-- On GT reduce production expr -> expr MINUS expr 
-- On GEQ reduce production expr -> expr MINUS expr 
-- On EQ reduce production expr -> expr MINUS expr 
-- On COMMA reduce production expr -> expr MINUS expr 
-- On BY reduce production expr -> expr MINUS expr 
-- On AND reduce production expr -> expr MINUS expr 

State 24:
expr -> expr LT . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 25

State 25:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr LT expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On MINUS shift to state 22
-- On DIVIDE shift to state 16
-- On TO reduce production expr -> expr LT expr 
-- On SEMI reduce production expr -> expr LT expr 
-- On RSQUARE reduce production expr -> expr LT expr 
-- On RPAREN reduce production expr -> expr LT expr 
-- On OR reduce production expr -> expr LT expr 
-- On NEQ reduce production expr -> expr LT expr 
-- On LT reduce production expr -> expr LT expr 
-- On LEQ reduce production expr -> expr LT expr 
-- On GT reduce production expr -> expr LT expr 
-- On GEQ reduce production expr -> expr LT expr 
-- On EQ reduce production expr -> expr LT expr 
-- On COMMA reduce production expr -> expr LT expr 
-- On BY reduce production expr -> expr LT expr 
-- On AND reduce production expr -> expr LT expr 

State 26:
expr -> expr LEQ . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 27

State 27:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr LEQ expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On MINUS shift to state 22
-- On DIVIDE shift to state 16
-- On TO reduce production expr -> expr LEQ expr 
-- On SEMI reduce production expr -> expr LEQ expr 
-- On RSQUARE reduce production expr -> expr LEQ expr 
-- On RPAREN reduce production expr -> expr LEQ expr 
-- On OR reduce production expr -> expr LEQ expr 
-- On NEQ reduce production expr -> expr LEQ expr 
-- On LT reduce production expr -> expr LEQ expr 
-- On LEQ reduce production expr -> expr LEQ expr 
-- On GT reduce production expr -> expr LEQ expr 
-- On GEQ reduce production expr -> expr LEQ expr 
-- On EQ reduce production expr -> expr LEQ expr 
-- On COMMA reduce production expr -> expr LEQ expr 
-- On BY reduce production expr -> expr LEQ expr 
-- On AND reduce production expr -> expr LEQ expr 

State 28:
expr -> expr GT . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 29

State 29:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr GT expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On MINUS shift to state 22
-- On DIVIDE shift to state 16
-- On TO reduce production expr -> expr GT expr 
-- On SEMI reduce production expr -> expr GT expr 
-- On RSQUARE reduce production expr -> expr GT expr 
-- On RPAREN reduce production expr -> expr GT expr 
-- On OR reduce production expr -> expr GT expr 
-- On NEQ reduce production expr -> expr GT expr 
-- On LT reduce production expr -> expr GT expr 
-- On LEQ reduce production expr -> expr GT expr 
-- On GT reduce production expr -> expr GT expr 
-- On GEQ reduce production expr -> expr GT expr 
-- On EQ reduce production expr -> expr GT expr 
-- On COMMA reduce production expr -> expr GT expr 
-- On BY reduce production expr -> expr GT expr 
-- On AND reduce production expr -> expr GT expr 

State 30:
expr -> expr GEQ . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 31

State 31:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr GEQ expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On MINUS shift to state 22
-- On DIVIDE shift to state 16
-- On TO reduce production expr -> expr GEQ expr 
-- On SEMI reduce production expr -> expr GEQ expr 
-- On RSQUARE reduce production expr -> expr GEQ expr 
-- On RPAREN reduce production expr -> expr GEQ expr 
-- On OR reduce production expr -> expr GEQ expr 
-- On NEQ reduce production expr -> expr GEQ expr 
-- On LT reduce production expr -> expr GEQ expr 
-- On LEQ reduce production expr -> expr GEQ expr 
-- On GT reduce production expr -> expr GEQ expr 
-- On GEQ reduce production expr -> expr GEQ expr 
-- On EQ reduce production expr -> expr GEQ expr 
-- On COMMA reduce production expr -> expr GEQ expr 
-- On BY reduce production expr -> expr GEQ expr 
-- On AND reduce production expr -> expr GEQ expr 

State 32:
expr -> expr EQ . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 33

State 33:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr EQ expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On DIVIDE shift to state 16
-- On TO reduce production expr -> expr EQ expr 
-- On SEMI reduce production expr -> expr EQ expr 
-- On RSQUARE reduce production expr -> expr EQ expr 
-- On RPAREN reduce production expr -> expr EQ expr 
-- On OR reduce production expr -> expr EQ expr 
-- On NEQ reduce production expr -> expr EQ expr 
-- On EQ reduce production expr -> expr EQ expr 
-- On COMMA reduce production expr -> expr EQ expr 
-- On BY reduce production expr -> expr EQ expr 
-- On AND reduce production expr -> expr EQ expr 

State 34:
expr -> expr AND . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 35

State 35:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr AND expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On TO reduce production expr -> expr AND expr 
-- On SEMI reduce production expr -> expr AND expr 
-- On RSQUARE reduce production expr -> expr AND expr 
-- On RPAREN reduce production expr -> expr AND expr 
-- On OR reduce production expr -> expr AND expr 
-- On COMMA reduce production expr -> expr AND expr 
-- On BY reduce production expr -> expr AND expr 
-- On AND reduce production expr -> expr AND expr 

State 36:
args_list -> args_list . COMMA expr [ RSQUARE COMMA ]
expr -> ID LSQUARE args_list . RSQUARE [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On RSQUARE shift to state 37
-- On COMMA shift to state 38

State 37:
expr -> ID LSQUARE args_list RSQUARE . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TO reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On TIMES reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On SEMI reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On RSQUARE reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On RPAREN reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On PLUS reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On OR reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On NEQ reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On MINUS reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On LT reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On LEQ reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On GT reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On GEQ reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On EQ reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On DIVIDE reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On COMMA reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On BY reduce production expr -> ID LSQUARE args_list RSQUARE 
-- On AND reduce production expr -> ID LSQUARE args_list RSQUARE 

State 38:
args_list -> args_list COMMA . expr [ RSQUARE RPAREN COMMA ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 39

State 39:
args_list -> args_list COMMA expr . [ RSQUARE RPAREN COMMA ]
expr -> expr . TIMES expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . PLUS expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . EQ expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA AND ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34
-- On RSQUARE reduce production args_list -> args_list COMMA expr 
-- On RPAREN reduce production args_list -> args_list COMMA expr 
-- On COMMA reduce production args_list -> args_list COMMA expr 

State 40:
expr -> ID LPAREN . args_list RPAREN [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 11
-- On args_list shift to state 41
-- On RPAREN reduce production args_list -> 
-- On COMMA reduce production args_list -> 

State 41:
args_list -> args_list . COMMA expr [ RPAREN COMMA ]
expr -> ID LPAREN args_list . RPAREN [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On RPAREN shift to state 42
-- On COMMA shift to state 38

State 42:
expr -> ID LPAREN args_list RPAREN . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TO reduce production expr -> ID LPAREN args_list RPAREN 
-- On TIMES reduce production expr -> ID LPAREN args_list RPAREN 
-- On SEMI reduce production expr -> ID LPAREN args_list RPAREN 
-- On RSQUARE reduce production expr -> ID LPAREN args_list RPAREN 
-- On RPAREN reduce production expr -> ID LPAREN args_list RPAREN 
-- On PLUS reduce production expr -> ID LPAREN args_list RPAREN 
-- On OR reduce production expr -> ID LPAREN args_list RPAREN 
-- On NEQ reduce production expr -> ID LPAREN args_list RPAREN 
-- On MINUS reduce production expr -> ID LPAREN args_list RPAREN 
-- On LT reduce production expr -> ID LPAREN args_list RPAREN 
-- On LEQ reduce production expr -> ID LPAREN args_list RPAREN 
-- On GT reduce production expr -> ID LPAREN args_list RPAREN 
-- On GEQ reduce production expr -> ID LPAREN args_list RPAREN 
-- On EQ reduce production expr -> ID LPAREN args_list RPAREN 
-- On DIVIDE reduce production expr -> ID LPAREN args_list RPAREN 
-- On COMMA reduce production expr -> ID LPAREN args_list RPAREN 
-- On BY reduce production expr -> ID LPAREN args_list RPAREN 
-- On AND reduce production expr -> ID LPAREN args_list RPAREN 

State 43:
expr -> ID ASSIGN . expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 44

State 44:
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> ID ASSIGN expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34
-- On TO reduce production expr -> ID ASSIGN expr 
-- On SEMI reduce production expr -> ID ASSIGN expr 
-- On RSQUARE reduce production expr -> ID ASSIGN expr 
-- On RPAREN reduce production expr -> ID ASSIGN expr 
-- On COMMA reduce production expr -> ID ASSIGN expr 
-- On BY reduce production expr -> ID ASSIGN expr 

State 45:
expr -> MINUS expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TO reduce production expr -> MINUS expr 
-- On TIMES reduce production expr -> MINUS expr 
-- On SEMI reduce production expr -> MINUS expr 
-- On RSQUARE reduce production expr -> MINUS expr 
-- On RPAREN reduce production expr -> MINUS expr 
-- On PLUS reduce production expr -> MINUS expr 
-- On OR reduce production expr -> MINUS expr 
-- On NEQ reduce production expr -> MINUS expr 
-- On MINUS reduce production expr -> MINUS expr 
-- On LT reduce production expr -> MINUS expr 
-- On LEQ reduce production expr -> MINUS expr 
-- On GT reduce production expr -> MINUS expr 
-- On GEQ reduce production expr -> MINUS expr 
-- On EQ reduce production expr -> MINUS expr 
-- On DIVIDE reduce production expr -> MINUS expr 
-- On COMMA reduce production expr -> MINUS expr 
-- On BY reduce production expr -> MINUS expr 
-- On AND reduce production expr -> MINUS expr 

State 46:
expr -> NOT expr . [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . TIMES expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GT expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . EQ expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . AND expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
expr -> expr . OR expr [ TO TIMES SEMI RSQUARE RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE COMMA BY AND ]
-- On TO reduce production expr -> NOT expr 
-- On TIMES reduce production expr -> NOT expr 
-- On SEMI reduce production expr -> NOT expr 
-- On RSQUARE reduce production expr -> NOT expr 
-- On RPAREN reduce production expr -> NOT expr 
-- On PLUS reduce production expr -> NOT expr 
-- On OR reduce production expr -> NOT expr 
-- On NEQ reduce production expr -> NOT expr 
-- On MINUS reduce production expr -> NOT expr 
-- On LT reduce production expr -> NOT expr 
-- On LEQ reduce production expr -> NOT expr 
-- On GT reduce production expr -> NOT expr 
-- On GEQ reduce production expr -> NOT expr 
-- On EQ reduce production expr -> NOT expr 
-- On DIVIDE reduce production expr -> NOT expr 
-- On COMMA reduce production expr -> NOT expr 
-- On BY reduce production expr -> NOT expr 
-- On AND reduce production expr -> NOT expr 

State 47:
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . EQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
statement -> WHILE LPAREN expr . RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TIMES shift to state 12
-- On RPAREN shift to state 48
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34

State 48:
statement -> WHILE LPAREN expr RPAREN . LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On LBRACE shift to state 49

State 49:
statement -> WHILE LPAREN expr RPAREN LBRACE . statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On statement_list shift to state 50
-- On WHILE reduce production statement_list -> 
-- On TRUE reduce production statement_list -> 
-- On RETURN reduce production statement_list -> 
-- On RBRACE reduce production statement_list -> 
-- On NOT reduce production statement_list -> 
-- On MINUS reduce production statement_list -> 
-- On INTLITERAL reduce production statement_list -> 
-- On IF reduce production statement_list -> 
-- On ID reduce production statement_list -> 
-- On FOR reduce production statement_list -> 
-- On FLOATLITERAL reduce production statement_list -> 
-- On FALSE reduce production statement_list -> 
-- On CONTINUE reduce production statement_list -> 
-- On BREAK reduce production statement_list -> 

State 50:
statement -> WHILE LPAREN expr RPAREN LBRACE statement_list . RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement_list -> statement_list . statement [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE CONTINUE BREAK ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On RETURN shift to state 51
-- On RBRACE shift to state 54
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On IF shift to state 55
-- On ID shift to state 7
-- On FOR shift to state 66
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On CONTINUE shift to state 77
-- On BREAK shift to state 79
-- On statement shift to state 81
-- On expr shift to state 82

State 51:
statement -> RETURN . expr SEMI [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 52

State 52:
expr -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LT expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GT expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . EQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . AND expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . OR expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
statement -> RETURN expr . SEMI [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TIMES shift to state 12
-- On SEMI shift to state 53
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34

State 53:
statement -> RETURN expr SEMI . [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On WHILE reduce production statement -> RETURN expr SEMI 
-- On TRUE reduce production statement -> RETURN expr SEMI 
-- On RETURN reduce production statement -> RETURN expr SEMI 
-- On RBRACE reduce production statement -> RETURN expr SEMI 
-- On NOT reduce production statement -> RETURN expr SEMI 
-- On MINUS reduce production statement -> RETURN expr SEMI 
-- On INTLITERAL reduce production statement -> RETURN expr SEMI 
-- On IF reduce production statement -> RETURN expr SEMI 
-- On ID reduce production statement -> RETURN expr SEMI 
-- On FOR reduce production statement -> RETURN expr SEMI 
-- On FLOATLITERAL reduce production statement -> RETURN expr SEMI 
-- On FALSE reduce production statement -> RETURN expr SEMI 
-- On EOF reduce production statement -> RETURN expr SEMI 
-- On CONTINUE reduce production statement -> RETURN expr SEMI 
-- On BREAK reduce production statement -> RETURN expr SEMI 

State 54:
statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE . [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On WHILE reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On TRUE reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On RETURN reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On RBRACE reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On NOT reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On MINUS reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On INTLITERAL reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On IF reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On ID reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On FOR reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On FLOATLITERAL reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On FALSE reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On EOF reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On CONTINUE reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On BREAK reduce production statement -> WHILE LPAREN expr RPAREN LBRACE statement_list RBRACE 

State 55:
statement -> IF . LPAREN expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement -> IF . LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On LPAREN shift to state 56

State 56:
statement -> IF LPAREN . expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement -> IF LPAREN . expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 57

State 57:
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . EQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
statement -> IF LPAREN expr . RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement -> IF LPAREN expr . RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TIMES shift to state 12
-- On RPAREN shift to state 58
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34

State 58:
statement -> IF LPAREN expr RPAREN . LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement -> IF LPAREN expr RPAREN . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On LBRACE shift to state 59

State 59:
statement -> IF LPAREN expr RPAREN LBRACE . statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement -> IF LPAREN expr RPAREN LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On statement_list shift to state 60
-- On WHILE reduce production statement_list -> 
-- On TRUE reduce production statement_list -> 
-- On RETURN reduce production statement_list -> 
-- On RBRACE reduce production statement_list -> 
-- On NOT reduce production statement_list -> 
-- On MINUS reduce production statement_list -> 
-- On INTLITERAL reduce production statement_list -> 
-- On IF reduce production statement_list -> 
-- On ID reduce production statement_list -> 
-- On FOR reduce production statement_list -> 
-- On FLOATLITERAL reduce production statement_list -> 
-- On FALSE reduce production statement_list -> 
-- On CONTINUE reduce production statement_list -> 
-- On BREAK reduce production statement_list -> 

State 60:
statement -> IF LPAREN expr RPAREN LBRACE statement_list . RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement -> IF LPAREN expr RPAREN LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement_list -> statement_list . statement [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE CONTINUE BREAK ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On RETURN shift to state 51
-- On RBRACE shift to state 61
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On IF shift to state 55
-- On ID shift to state 7
-- On FOR shift to state 66
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On CONTINUE shift to state 77
-- On BREAK shift to state 79
-- On statement shift to state 81
-- On expr shift to state 82

State 61:
statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE . [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On ELSE shift to state 62
-- On WHILE reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On TRUE reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On RETURN reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On RBRACE reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On NOT reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On MINUS reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On INTLITERAL reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On IF reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On ID reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On FOR reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On FLOATLITERAL reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On FALSE reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On EOF reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On CONTINUE reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 
-- On BREAK reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE 

State 62:
statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On LBRACE shift to state 63

State 63:
statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On statement_list shift to state 64
-- On WHILE reduce production statement_list -> 
-- On TRUE reduce production statement_list -> 
-- On RETURN reduce production statement_list -> 
-- On RBRACE reduce production statement_list -> 
-- On NOT reduce production statement_list -> 
-- On MINUS reduce production statement_list -> 
-- On INTLITERAL reduce production statement_list -> 
-- On IF reduce production statement_list -> 
-- On ID reduce production statement_list -> 
-- On FOR reduce production statement_list -> 
-- On FLOATLITERAL reduce production statement_list -> 
-- On FALSE reduce production statement_list -> 
-- On CONTINUE reduce production statement_list -> 
-- On BREAK reduce production statement_list -> 

State 64:
statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement_list -> statement_list . statement [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE CONTINUE BREAK ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On RETURN shift to state 51
-- On RBRACE shift to state 65
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On IF shift to state 55
-- On ID shift to state 7
-- On FOR shift to state 66
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On CONTINUE shift to state 77
-- On BREAK shift to state 79
-- On statement shift to state 81
-- On expr shift to state 82

State 65:
statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE . [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On WHILE reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On TRUE reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On RETURN reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On RBRACE reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On NOT reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On MINUS reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On INTLITERAL reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On IF reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On ID reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On FOR reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On FLOATLITERAL reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On FALSE reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On EOF reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On CONTINUE reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 
-- On BREAK reduce production statement -> IF LPAREN expr RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE 

State 66:
statement -> FOR . LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement -> FOR . LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On LPAREN shift to state 67

State 67:
statement -> FOR LPAREN . expr TO expr BY expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement -> FOR LPAREN . expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 68

State 68:
expr -> expr . TIMES expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . DIVIDE expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . PLUS expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . MINUS expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LT expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GT expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LEQ expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GEQ expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . NEQ expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . EQ expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . AND expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . OR expr [ TO TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
statement -> FOR LPAREN expr . TO expr BY expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement -> FOR LPAREN expr . SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TO shift to state 69
-- On TIMES shift to state 12
-- On SEMI shift to state 84
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34

State 69:
statement -> FOR LPAREN expr TO . expr BY expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 70

State 70:
expr -> expr . TIMES expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
expr -> expr . DIVIDE expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
expr -> expr . PLUS expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
expr -> expr . MINUS expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
expr -> expr . LT expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
expr -> expr . GT expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
expr -> expr . LEQ expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
expr -> expr . GEQ expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
expr -> expr . NEQ expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
expr -> expr . EQ expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
expr -> expr . AND expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
expr -> expr . OR expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE BY AND ]
statement -> FOR LPAREN expr TO expr . BY expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TIMES shift to state 12
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On BY shift to state 71
-- On AND shift to state 34

State 71:
statement -> FOR LPAREN expr TO expr BY . expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 72

State 72:
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . EQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
statement -> FOR LPAREN expr TO expr BY expr . RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TIMES shift to state 12
-- On RPAREN shift to state 73
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34

State 73:
statement -> FOR LPAREN expr TO expr BY expr RPAREN . LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On LBRACE shift to state 74

State 74:
statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE . statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On statement_list shift to state 75
-- On WHILE reduce production statement_list -> 
-- On TRUE reduce production statement_list -> 
-- On RETURN reduce production statement_list -> 
-- On RBRACE reduce production statement_list -> 
-- On NOT reduce production statement_list -> 
-- On MINUS reduce production statement_list -> 
-- On INTLITERAL reduce production statement_list -> 
-- On IF reduce production statement_list -> 
-- On ID reduce production statement_list -> 
-- On FOR reduce production statement_list -> 
-- On FLOATLITERAL reduce production statement_list -> 
-- On FALSE reduce production statement_list -> 
-- On CONTINUE reduce production statement_list -> 
-- On BREAK reduce production statement_list -> 

State 75:
statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list . RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement_list -> statement_list . statement [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE CONTINUE BREAK ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On RETURN shift to state 51
-- On RBRACE shift to state 76
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On IF shift to state 55
-- On ID shift to state 7
-- On FOR shift to state 66
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On CONTINUE shift to state 77
-- On BREAK shift to state 79
-- On statement shift to state 81
-- On expr shift to state 82

State 76:
statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE . [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On WHILE reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On TRUE reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On RETURN reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On RBRACE reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On NOT reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On MINUS reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On INTLITERAL reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On IF reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On ID reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On FOR reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On FLOATLITERAL reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On FALSE reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On EOF reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On CONTINUE reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 
-- On BREAK reduce production statement -> FOR LPAREN expr TO expr BY expr RPAREN LBRACE statement_list RBRACE 

State 77:
statement -> CONTINUE . SEMI [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On SEMI shift to state 78

State 78:
statement -> CONTINUE SEMI . [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On WHILE reduce production statement -> CONTINUE SEMI 
-- On TRUE reduce production statement -> CONTINUE SEMI 
-- On RETURN reduce production statement -> CONTINUE SEMI 
-- On RBRACE reduce production statement -> CONTINUE SEMI 
-- On NOT reduce production statement -> CONTINUE SEMI 
-- On MINUS reduce production statement -> CONTINUE SEMI 
-- On INTLITERAL reduce production statement -> CONTINUE SEMI 
-- On IF reduce production statement -> CONTINUE SEMI 
-- On ID reduce production statement -> CONTINUE SEMI 
-- On FOR reduce production statement -> CONTINUE SEMI 
-- On FLOATLITERAL reduce production statement -> CONTINUE SEMI 
-- On FALSE reduce production statement -> CONTINUE SEMI 
-- On EOF reduce production statement -> CONTINUE SEMI 
-- On CONTINUE reduce production statement -> CONTINUE SEMI 
-- On BREAK reduce production statement -> CONTINUE SEMI 

State 79:
statement -> BREAK . SEMI [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On SEMI shift to state 80

State 80:
statement -> BREAK SEMI . [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On WHILE reduce production statement -> BREAK SEMI 
-- On TRUE reduce production statement -> BREAK SEMI 
-- On RETURN reduce production statement -> BREAK SEMI 
-- On RBRACE reduce production statement -> BREAK SEMI 
-- On NOT reduce production statement -> BREAK SEMI 
-- On MINUS reduce production statement -> BREAK SEMI 
-- On INTLITERAL reduce production statement -> BREAK SEMI 
-- On IF reduce production statement -> BREAK SEMI 
-- On ID reduce production statement -> BREAK SEMI 
-- On FOR reduce production statement -> BREAK SEMI 
-- On FLOATLITERAL reduce production statement -> BREAK SEMI 
-- On FALSE reduce production statement -> BREAK SEMI 
-- On EOF reduce production statement -> BREAK SEMI 
-- On CONTINUE reduce production statement -> BREAK SEMI 
-- On BREAK reduce production statement -> BREAK SEMI 

State 81:
statement_list -> statement_list statement . [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE CONTINUE BREAK ]
-- On WHILE reduce production statement_list -> statement_list statement 
-- On TRUE reduce production statement_list -> statement_list statement 
-- On RETURN reduce production statement_list -> statement_list statement 
-- On RBRACE reduce production statement_list -> statement_list statement 
-- On NOT reduce production statement_list -> statement_list statement 
-- On MINUS reduce production statement_list -> statement_list statement 
-- On INTLITERAL reduce production statement_list -> statement_list statement 
-- On IF reduce production statement_list -> statement_list statement 
-- On ID reduce production statement_list -> statement_list statement 
-- On FOR reduce production statement_list -> statement_list statement 
-- On FLOATLITERAL reduce production statement_list -> statement_list statement 
-- On FALSE reduce production statement_list -> statement_list statement 
-- On CONTINUE reduce production statement_list -> statement_list statement 
-- On BREAK reduce production statement_list -> statement_list statement 

State 82:
expr -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LT expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GT expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . EQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . AND expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . OR expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
statement -> expr . SEMI [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TIMES shift to state 12
-- On SEMI shift to state 83
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34

State 83:
statement -> expr SEMI . [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On WHILE reduce production statement -> expr SEMI 
-- On TRUE reduce production statement -> expr SEMI 
-- On RETURN reduce production statement -> expr SEMI 
-- On RBRACE reduce production statement -> expr SEMI 
-- On NOT reduce production statement -> expr SEMI 
-- On MINUS reduce production statement -> expr SEMI 
-- On INTLITERAL reduce production statement -> expr SEMI 
-- On IF reduce production statement -> expr SEMI 
-- On ID reduce production statement -> expr SEMI 
-- On FOR reduce production statement -> expr SEMI 
-- On FLOATLITERAL reduce production statement -> expr SEMI 
-- On FALSE reduce production statement -> expr SEMI 
-- On EOF reduce production statement -> expr SEMI 
-- On CONTINUE reduce production statement -> expr SEMI 
-- On BREAK reduce production statement -> expr SEMI 

State 84:
statement -> FOR LPAREN expr SEMI . expr SEMI expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 85

State 85:
expr -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LT expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GT expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . EQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . AND expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . OR expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
statement -> FOR LPAREN expr SEMI expr . SEMI expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TIMES shift to state 12
-- On SEMI shift to state 86
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34

State 86:
statement -> FOR LPAREN expr SEMI expr SEMI . expr RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TRUE shift to state 3
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On ID shift to state 7
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On expr shift to state 87

State 87:
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . EQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ DIVIDE AND ]
statement -> FOR LPAREN expr SEMI expr SEMI expr . RPAREN LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On TIMES shift to state 12
-- On RPAREN shift to state 88
-- On PLUS shift to state 14
-- On OR shift to state 18
-- On NEQ shift to state 20
-- On MINUS shift to state 22
-- On LT shift to state 24
-- On LEQ shift to state 26
-- On GT shift to state 28
-- On GEQ shift to state 30
-- On EQ shift to state 32
-- On DIVIDE shift to state 16
-- On AND shift to state 34

State 88:
statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN . LBRACE statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On LBRACE shift to state 89

State 89:
statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE . statement_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On statement_list shift to state 90
-- On WHILE reduce production statement_list -> 
-- On TRUE reduce production statement_list -> 
-- On RETURN reduce production statement_list -> 
-- On RBRACE reduce production statement_list -> 
-- On NOT reduce production statement_list -> 
-- On MINUS reduce production statement_list -> 
-- On INTLITERAL reduce production statement_list -> 
-- On IF reduce production statement_list -> 
-- On ID reduce production statement_list -> 
-- On FOR reduce production statement_list -> 
-- On FLOATLITERAL reduce production statement_list -> 
-- On FALSE reduce production statement_list -> 
-- On CONTINUE reduce production statement_list -> 
-- On BREAK reduce production statement_list -> 

State 90:
statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list . RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
statement_list -> statement_list . statement [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE CONTINUE BREAK ]
-- On WHILE shift to state 1
-- On TRUE shift to state 3
-- On RETURN shift to state 51
-- On RBRACE shift to state 91
-- On NOT shift to state 4
-- On MINUS shift to state 5
-- On INTLITERAL shift to state 6
-- On IF shift to state 55
-- On ID shift to state 7
-- On FOR shift to state 66
-- On FLOATLITERAL shift to state 9
-- On FALSE shift to state 10
-- On CONTINUE shift to state 77
-- On BREAK shift to state 79
-- On statement shift to state 81
-- On expr shift to state 82

State 91:
statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE . [ WHILE TRUE RETURN RBRACE NOT MINUS INTLITERAL IF ID FOR FLOATLITERAL FALSE EOF CONTINUE BREAK ]
-- On WHILE reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On TRUE reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On RETURN reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On RBRACE reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On NOT reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On MINUS reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On INTLITERAL reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On IF reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On ID reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On FOR reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On FLOATLITERAL reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On FALSE reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On EOF reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On CONTINUE reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 
-- On BREAK reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN LBRACE statement_list RBRACE 

State 92:
program -> statement . EOF [ # ]
-- On EOF shift to state 93

State 93:
program -> statement EOF . [ # ]
-- On # reduce production program -> statement EOF 

State 94:
program' -> program . [ # ]
-- On # accept program

