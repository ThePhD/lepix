; ModuleID = 'lepix'

@__ifmt = global [3 x i8] c"%d\00"
@__sfmt = global [3 x i8] c"%s\00"
@__ffmt = global [3 x i8] c"%f\00"
@str_lit = private unnamed_addr constant [2 x i8] c"\0A\00"
@str_lit.1 = private unnamed_addr constant [2 x i8] c"\0A\00"
@str_lit.2 = private unnamed_addr constant [2 x i8] c"\0A\00"

declare i32 @printf(i8*, ...)

define void @"lib.print_n_!f64"(double %i) {
entry:
  %0 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__ffmt, i32 0, i32 0), double %i)
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__sfmt, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_lit, i32 0, i32 0))
  ret void
}

define void @"lib.print_n_!i32"(i32 %i) {
entry:
  %0 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__ifmt, i32 0, i32 0), i32 %i)
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__sfmt, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_lit.1, i32 0, i32 0))
  ret void
}

define void @"lib.print_n_!s"(i8* %i) {
entry:
  %0 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__sfmt, i32 0, i32 0), i8* %i)
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__sfmt, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_lit.2, i32 0, i32 0))
  ret void
}

define i32 @main() {
entry:
  %x = alloca i32
  %y = alloca i32
  %y2 = alloca i32
  %z = alloca i32
  %z2 = alloca i32
  store i32 24, i32* %x
  store i32 47, i32* %y
  store i32 47, i32* %y2
  store i32 2, i32* %z
  store i32 2, i32* %z2
  %tmp = load i32, i32* %x
  call void @"lib.print_n_!i32"(i32 %tmp)
  %tmp1 = load i32, i32* %y
  call void @"lib.print_n_!i32"(i32 %tmp1)
  %tmp2 = load i32, i32* %y2
  call void @"lib.print_n_!i32"(i32 %tmp2)
  %tmp3 = load i32, i32* %z
  call void @"lib.print_n_!i32"(i32 %tmp3)
  %tmp4 = load i32, i32* %z2
  call void @"lib.print_n_!i32"(i32 %tmp4)
  ret i32 0
}
